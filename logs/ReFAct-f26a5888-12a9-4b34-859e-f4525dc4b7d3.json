{
    "agent_settings": {
        "consider_cyclomatic_complexity": false,
        "make_incremental_changes": false,
        "use_refactoring_tricks": false,
        "get_buddy_feedback": false,
        "use_previous_history": true,
        "make_plan": false,
        "dynamic_plan": false,
        "modify_specific_method": false,
        "clear_error_after_n": false,
        "clip_context_window": false
    },
    "execution": [
        "\n    You are a professional software developer.\n    Your job is to refactor the existing codebases.\n    You work in a loop of thought, action, and observation.\n\n    \n    For each issue, you will use a refactoring to address it.\n    \n\n    You can use a variety of tools to assist you.\n    \n    After each change, run the tests to ensure that the code still works, and commit the changes to the codebase.\n\n    If a test failed, come up with a new plan to address the issue.\n\n    Then, proceed with the next issue.\n    You can also revisit files you have already worked on.\n\n    The following tools are available:\n    [\n    {\n        \"name\": \"browse_files\",\n        \"description\": \"Get an overview of the source files in the code project.\",\n        \"args\": {}\n    },\n    {\n        \"name\": \"open_file\",\n        \"description\": \"Open a specific file to see it's soruce code.\",\n        \"args\": {\n            \"filepath\": {\n                \"title\": \"Filepath\",\n                \"type\": \"string\"\n            }\n        }\n    },\n    {\n        \"name\": \"overwrite_file\",\n        \"description\": \"Overwrite the content of a specific file.\\n\\nALWAYS RESPOND WITH THE ENTIRE FILE CONTENT, NOT JUST SNIPPETS.\",\n        \"args\": {\n            \"filepath\": {\n                \"title\": \"Filepath\",\n                \"type\": \"string\"\n            },\n            \"content\": {\n                \"title\": \"Content\",\n                \"type\": \"string\"\n            }\n        }\n    },\n    {\n        \"name\": \"commit_changes\",\n        \"description\": \"Commit the changes to the codebase.\\nOnly commit after running the tests.\\nPlease make the commit message as descriptive as possible.\",\n        \"args\": {\n            \"files\": {\n                \"title\": \"Files\",\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"commit_message\": {\n                \"title\": \"Commit Message\",\n                \"type\": \"string\"\n            }\n        }\n    },\n    {\n        \"name\": \"stop\",\n        \"description\": \"Call this tool when you see no further refactoring Opportunities.\",\n        \"args\": {\n            \"changes_summary\": {\n                \"title\": \"Changes Summary\",\n                \"type\": \"string\"\n            }\n        }\n    }\n]\n\n    Respond with the tool you would like to use.\n    You don't have to worry about writing tests, as they are already provided.\n\n    AFTER EACH CHANGE, RUN THE TESTS TO ENSURE THAT THE CODE STILL WORKS.\n    IF THE CODE WORKS, COMMIT THE CHANGES TO THE CODEBASE.\n    IF THE CODE DOES NOT WORK, REVERT THE CHANGES AND TRY AGAIN.\n    \n\n    \n    IF YOU CAN'T FIND FURTHER ISSUES, YOU CAN STOP.\n\n    IF YOU'RE STUCK, E.G. IF TESTS FAIL MULTIPLE TIMES IN A ROW, OR IF YOU NEED FURTHER INPUT,\n    TRY AN ALTERNATIVE APPROACH.\n\n    The output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"description\": \"Pydantic model for the ReAct agent's output. \", \"properties\": {\"thought\": {\"description\": \"Your current thought.\", \"title\": \"Thought\", \"type\": \"string\"}, \"action\": {\"description\": \"The tool to use.\", \"title\": \"Action\", \"type\": \"string\"}, \"tools_input\": {\"description\": \"The input to the action.\", \"title\": \"Tools Input\", \"type\": \"object\"}, \"observation\": {\"description\": \"Your observation.\", \"title\": \"Observation\", \"type\": \"string\"}}, \"required\": [\"thought\", \"action\", \"tools_input\", \"observation\"]}\n```\n    ",
        {
            "thought": "First, I need to get an overview of the source files in the code project to identify potential areas for refactoring.",
            "action": "browse_files",
            "tools_input": {},
            "observation": "I will review the list of files to identify which ones might need refactoring."
        },
        {
            "tool": "browse_files",
            "result": "Files: src/main/java/technology/tabula/RectangleSpatialIndex.java, src/main/java/technology/tabula/TextChunk.java, src/main/java/technology/tabula/Page.java, src/main/java/technology/tabula/ObjectExtractorStreamEngine.java, src/main/java/technology/tabula/PageDims.java, src/main/java/technology/tabula/TextElement.java, src/main/java/technology/tabula/Pair.java, src/main/java/technology/tabula/RectangularTextContainer.java, src/main/java/technology/tabula/CommandLineApp.java, src/main/java/technology/tabula/Ruling.java, src/main/java/technology/tabula/QuickSort.java, src/main/java/technology/tabula/Table.java, src/main/java/technology/tabula/TableWithRulingLines.java, src/main/java/technology/tabula/Utils.java, src/main/java/technology/tabula/ObjectExtractor.java, src/main/java/technology/tabula/ProjectionProfile.java, src/main/java/technology/tabula/Rectangle.java, src/main/java/technology/tabula/CohenSutherlandClipping.java, src/main/java/technology/tabula/HasText.java, src/main/java/technology/tabula/TextStripper.java, src/main/java/technology/tabula/Cell.java, src/main/java/technology/tabula/PageIterator.java, src/main/java/technology/tabula/Line.java, src/main/java/technology/tabula/writers/Writer.java, src/main/java/technology/tabula/writers/CSVWriter.java, src/main/java/technology/tabula/writers/JSONWriter.java, src/main/java/technology/tabula/writers/TSVWriter.java, src/main/java/technology/tabula/json/TableSerializer.java, src/main/java/technology/tabula/json/RectangularTextContainerSerializer.java, src/main/java/technology/tabula/detectors/NurminenDetectionAlgorithm.java, src/main/java/technology/tabula/detectors/DetectionAlgorithm.java, src/main/java/technology/tabula/detectors/SpreadsheetDetectionAlgorithm.java, src/main/java/technology/tabula/extractors/ExtractionAlgorithm.java, src/main/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm.java, src/main/java/technology/tabula/extractors/BasicExtractionAlgorithm.java, src/main/java/technology/tabula/debug/Debug.java"
        },
        {
            "thought": "Given the list of files, I will start by examining the `Utils.java` file, as utility classes often contain static methods that can benefit from refactoring.",
            "action": "open_file",
            "tools_input": {
                "filepath": "src/main/java/technology/tabula/Utils.java"
            },
            "observation": "I will review the content of the `Utils.java` file to identify any refactoring opportunities."
        },
        {
            "tool": "open_file",
            "result": "package technology.tabula;\n\nimport java.awt.Shape;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.*;\n\nimport org.apache.commons.cli.ParseException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\n/**\n * @author manuel\n */\npublic class Utils {\n    public static boolean within(double first, double second, double variance) {\n        return second < first + variance && second > first - variance;\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2, double variance) {\n        return within(y1, y2, variance) || (y2 <= y1 && y2 >= y1 - height1) || (y1 <= y2 && y1 >= y2 - height2);\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2) {\n        return overlap(y1, height1, y2, height2, 0.1f);\n    }\n\n    private final static float EPSILON = 0.01f;\n    protected static boolean useQuickSort = useCustomQuickSort();\n\n    public static boolean feq(double f1, double f2) {\n        return (Math.abs(f1 - f2) < EPSILON);\n    }\n\n    public static float round(double d, int decimalPlace) {\n        BigDecimal bd = new BigDecimal(Double.toString(d));\n        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\n        return bd.floatValue();\n    }\n\n    public static Rectangle bounds(Collection<? extends Shape> shapes) {\n        if (shapes.isEmpty()) {\n            throw new IllegalArgumentException(\"shapes can't be empty\");\n        }\n\n        Iterator<? extends Shape> iter = shapes.iterator();\n        Rectangle rv = new Rectangle();\n        rv.setRect(iter.next().getBounds2D());\n\n        while (iter.hasNext()) {\n            Rectangle2D.union(iter.next().getBounds2D(), rv, rv);\n        }\n\n        return rv;\n\n    }\n\n    // range iterator\n    public static List<Integer> range(final int begin, final int end) {\n        return new AbstractList<Integer>() {\n            @Override\n            public Integer get(int index) {\n                return begin + index;\n            }\n\n            @Override\n            public int size() {\n                return end - begin;\n            }\n        };\n    }\n\n\n    /* from apache.commons-lang */\n    public static boolean isNumeric(final CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        final int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isDigit(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String join(String glue, String... s) {\n        int k = s.length;\n        if (k == 0) {\n            return null;\n        }\n        StringBuilder out = new StringBuilder();\n        out.append(s[0]);\n        for (int x = 1; x < k; ++x) {\n            out.append(glue).append(s[x]);\n        }\n        return out.toString();\n    }\n\n    public static <T> List<List<T>> transpose(List<List<T>> table) {\n        List<List<T>> ret = new ArrayList<>();\n        final int N = table.get(0).size();\n        for (int i = 0; i < N; i++) {\n            List<T> col = new ArrayList<>();\n            for (List<T> row : table) {\n                col.add(row.get(i));\n            }\n            ret.add(col);\n        }\n        return ret;\n    }\n\n\t/**\n\t * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're\n\t * running on JDK7+\n\t */\n\tpublic static <T extends Comparable<? super T>> void sort(List<T> list) {\n\t\tif (useQuickSort) QuickSort.sort(list);\n\t\telse              Collections.sort(list);\n\t}\n\n\tpublic static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n\t\tif (useQuickSort) QuickSort.sort(list, comparator);\n\t\telse              Collections.sort(list, comparator);\n\t}\n\n    private static boolean useCustomQuickSort() {\n        // taken from PDFBOX:\n\n        // check if we need to use the custom quicksort algorithm as a\n        // workaround to the transitivity issue of TextPositionComparator:\n        // https://issues.apache.org/jira/browse/PDFBOX-1512\n\n        String numberybits = System.getProperty(\"java.version\").split(\n                \"-\")[0]; // some Java version strings are 9-internal, which is dumb.\n        String[] versionComponents = numberybits.split(\n                \"\\\\.\");\n        int javaMajorVersion;\n        int javaMinorVersion;\n        if (versionComponents.length >= 2) {\n            javaMajorVersion = Integer.parseInt(versionComponents[0]);\n            javaMinorVersion = Integer.parseInt(versionComponents[1]);\n        } else {\n            javaMajorVersion = 1;\n            javaMinorVersion = Integer.parseInt(versionComponents[0]);\n        }\n        boolean is16orLess = javaMajorVersion == 1 && javaMinorVersion <= 6;\n        String useLegacySort = System.getProperty(\"java.util.Arrays.useLegacyMergeSort\");\n        return !is16orLess || (useLegacySort != null && useLegacySort.equals(\"true\"));\n    }\n\n\n    public static List<Integer> parsePagesOption(String pagesSpec) throws ParseException {\n        if (pagesSpec.equals(\"all\")) {\n            return null;\n        }\n\n        List<Integer> rv = new ArrayList<>();\n\n        String[] ranges = pagesSpec.split(\",\");\n        for (int i = 0; i < ranges.length; i++) {\n            String[] r = ranges[i].split(\"-\");\n            if (r.length == 0 || !Utils.isNumeric(r[0]) || r.length > 1 && !Utils.isNumeric(r[1])) {\n                throw new ParseException(\"Syntax error in page range specification\");\n            }\n\n            if (r.length < 2) {\n                rv.add(Integer.parseInt(r[0]));\n            } else {\n                int t = Integer.parseInt(r[0]);\n                int f = Integer.parseInt(r[1]);\n                if (t > f) {\n                    throw new ParseException(\"Syntax error in page range specification\");\n                }\n                rv.addAll(Utils.range(t, f + 1));\n            }\n        }\n\n        Collections.sort(rv);\n        return rv;\n    }\n\n    public static void snapPoints(List<? extends Line2D.Float> rulings, float xThreshold, float yThreshold) {\n\n        // collect points and keep a Line -> p1,p2 map\n        Map<Line2D.Float, Point2D[]> linesToPoints = new HashMap<>();\n        List<Point2D> points = new ArrayList<>();\n        for (Line2D.Float r : rulings) {\n            Point2D p1 = r.getP1();\n            Point2D p2 = r.getP2();\n            linesToPoints.put(r, new Point2D[]{p1, p2});\n            points.add(p1);\n            points.add(p2);\n        }\n\n        // snap by X\n        Collections.sort(points, new Comparator<Point2D>() {\n            @Override\n            public int compare(Point2D arg0, Point2D arg1) {\n                return java.lang.Double.compare(arg0.getX(), arg1.getX());\n            }\n        });\n\n        List<List<Point2D>> groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{points.get(0)})));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(p.getX() - last.get(0).getX()) < xThreshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{p})));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            float avgLoc = 0;\n            for (Point2D p : group) {\n                avgLoc += p.getX();\n            }\n            avgLoc /= group.size();\n            for (Point2D p : group) {\n                p.setLocation(avgLoc, p.getY());\n            }\n        }\n        // ---\n\n        // snap by Y\n        Collections.sort(points, new Comparator<Point2D>() {\n            @Override\n            public int compare(Point2D arg0, Point2D arg1) {\n                return java.lang.Double.compare(arg0.getY(), arg1.getY());\n            }\n        });\n\n        groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{points.get(0)})));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(p.getY() - last.get(0).getY()) < yThreshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{p})));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            float avgLoc = 0;\n            for (Point2D p : group) {\n                avgLoc += p.getY();\n            }\n            avgLoc /= group.size();\n            for (Point2D p : group) {\n                p.setLocation(p.getX(), avgLoc);\n            }\n        }\n        // ---\n\n        // finally, modify lines\n        for (Map.Entry<Line2D.Float, Point2D[]> ltp : linesToPoints.entrySet()) {\n            Point2D[] p = ltp.getValue();\n            ltp.getKey().setLine(p[0], p[1]);\n        }\n    }\n\n\tpublic static BufferedImage pageConvertToImage(PDPage page, int dpi, ImageType imageType) throws IOException {\n\t\ttry (PDDocument document = new PDDocument()) {\n\t\t\tdocument.addPage(page);\n\t\t\tPDFRenderer renderer = new PDFRenderer(document);\n\t\t\tdocument.close();\n\t\t\treturn renderer.renderImageWithDPI(0, dpi, imageType);\n\t\t}\n\t}\n\n  public static BufferedImage pageConvertToImage(PDDocument doc, PDPage page, int dpi, ImageType imageType) throws IOException {\n    PDFRenderer renderer = new PDFRenderer(doc);\n    return renderer.renderImageWithDPI(doc.getPages().indexOf(page), dpi, imageType);\n  }\n\n}\n"
        },
        "The `Utils.java` file contains a variety of utility methods, some of which can be refactored for better readability and maintainability. Here are a few potential refactoring opportunities:\n\n1. **Extract Method**: Some methods are doing multiple things and can be broken down into smaller methods.\n2. **Remove Redundant Code**: There are overloaded methods that can be simplified.\n3. **Use Java 8 Features**: Some loops and collections operations can be replaced with Java 8 streams and lambda expressions.\n\nLet's start by refactoring the `snapPoints` method to make it more readable and maintainable.\n\n### Plan:\n1. Extract the logic for snapping points by X and Y into separate methods.\n2. Use Java 8 streams to simplify the sorting and grouping logic.\n\nLet's proceed with the refactoring.\n\n```java\npackage technology.tabula;\n\nimport java.awt.Shape;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.cli.ParseException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\n/**\n * Utility class for various helper methods.\n */\npublic class Utils {\n    public static boolean within(double first, double second, double variance) {\n        return second < first + variance && second > first - variance;\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2, double variance) {\n        return within(y1, y2, variance) || (y2 <= y1 && y2 >= y1 - height1) || (y1 <= y2 && y1 >= y2 - height2);\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2) {\n        return overlap(y1, height1, y2, height2, 0.1f);\n    }\n\n    private final static float EPSILON = 0.01f;\n    protected static boolean useQuickSort = useCustomQuickSort();\n\n    public static boolean feq(double f1, double f2) {\n        return (Math.abs(f1 - f2) < EPSILON);\n    }\n\n    public static float round(double d, int decimalPlace) {\n        BigDecimal bd = new BigDecimal(Double.toString(d));\n        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\n        return bd.floatValue();\n    }\n\n    public static Rectangle bounds(Collection<? extends Shape> shapes) {\n        if (shapes.isEmpty()) {\n            throw new IllegalArgumentException(\"shapes can't be empty\");\n        }\n\n        Iterator<? extends Shape> iter = shapes.iterator();\n        Rectangle rv = new Rectangle();\n        rv.setRect(iter.next().getBounds2D());\n\n        while (iter.hasNext()) {\n            Rectangle2D.union(iter.next().getBounds2D(), rv, rv);\n        }\n\n        return rv;\n    }\n\n    // range iterator\n    public static List<Integer> range(final int begin, final int end) {\n        return new AbstractList<Integer>() {\n            @Override\n            public Integer get(int index) {\n                return begin + index;\n            }\n\n            @Override\n            public int size() {\n                return end - begin;\n            }\n        };\n    }\n\n    /* from apache.commons-lang */\n    public static boolean isNumeric(final CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        final int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isDigit(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String join(String glue, String... s) {\n        int k = s.length;\n        if (k == 0) {\n            return null;\n        }\n        StringBuilder out = new StringBuilder();\n        out.append(s[0]);\n        for (int x = 1; x < k; ++x) {\n            out.append(glue).append(s[x]);\n        }\n        return out.toString();\n    }\n\n    public static <T> List<List<T>> transpose(List<List<T>> table) {\n        List<List<T>> ret = new ArrayList<>();\n        final int N = table.get(0).size();\n        for (int i = 0; i < N; i++) {\n            List<T> col = new ArrayList<>();\n            for (List<T> row : table) {\n                col.add(row.get(i));\n            }\n            ret.add(col);\n        }\n        return ret;\n    }\n\n    /**\n     * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're\n     * running on JDK7+\n     */\n    public static <T extends Comparable<? super T>> void sort(List<T> list) {\n        if (useQuickSort) QuickSort.sort(list);\n        else              Collections.sort(list);\n    }\n\n    public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n        if (useQuickSort) QuickSort.sort(list, comparator);\n        else              Collections.sort(list, comparator);\n    }\n\n    private static boolean useCustomQuickSort() {\n        // taken from PDFBOX:\n\n        // check if we need to use the custom quicksort algorithm as a\n        // workaround to the transitivity issue of TextPositionComparator:\n        // https://issues.apache.org/jira/browse/PDFBOX-1512\n\n        String numberybits = System.getProperty(\"java.version\").split(\n                \"-\")[0]; // some Java version strings are 9-internal, which is dumb.\n        String[] versionComponents = numberybits.split(\n                \"\\\\.\");\n        int javaMajorVersion;\n        int javaMinorVersion;\n        if (versionComponents.length >= 2) {\n            javaMajorVersion = Integer.parseInt(versionComponents[0]);\n            javaMinorVersion = Integer.parseInt(versionComponents[1]);\n        } else {\n            javaMajorVersion = 1;\n            javaMinorVersion = Integer.parseInt(versionComponents[0]);\n        }\n        boolean is16orLess = javaMajorVersion == 1 && javaMinorVersion <= 6;\n        String useLegacySort = System.getProperty(\"java.util.Arrays.useLegacyMergeSort\");\n        return !is16orLess || (useLegacySort != null && useLegacySort.equals(\"true\"));\n    }\n\n    public static List<Integer> parsePagesOption(String pagesSpec) throws ParseException {\n        if (pagesSpec.equals(\"all\")) {\n            return null;\n        }\n\n        List<Integer> rv = new ArrayList<>();\n\n        String[] ranges = pagesSpec.split(\",\");\n        for (int i = 0; i < ranges.length; i++) {\n            String[] r = ranges[i].split(\"-\");\n            if (r.length == 0 || !Utils.isNumeric(r[0]) || r.length > 1 && !Utils.isNumeric(r[1])) {\n                throw new ParseException(\"Syntax error in page range specification\");\n            }\n\n            if (r.length < 2) {\n                rv.add(Integer.parseInt(r[0]));\n            } else {\n                int t = Integer.parseInt(r[0]);\n                int f = Integer.parseInt(r[1]);\n                if (t > f) {\n                    throw new ParseException(\"Syntax error in page range specification\");\n                }\n                rv.addAll(Utils.range(t, f + 1));\n            }\n        }\n\n        Collections.sort(rv);\n        return rv;\n    }\n\n    public static void snapPoints(List<? extends Line2D.Float> rulings, float xThreshold, float yThreshold) {\n        Map<Line2D.Float, Point2D[]> linesToPoints = new HashMap<>();\n        List<Point2D> points = new ArrayList<>();\n        for (Line2D.Float r : rulings) {\n            Point2D p1 = r.getP1();\n            Point2D p2 = r.getP2();\n            linesToPoints.put(r, new Point2D[]{p1, p2});\n            points.add(p1);\n            points.add(p2);\n        }\n\n        snapByAxis(points, xThreshold, Point2D::getX, Point2D::setLocation);\n        snapByAxis(points, yThreshold, Point2D::getY, (p, avg) -> p.setLocation(p.getX(), avg));\n\n        for (Map.Entry<Line2D.Float, Point2D[]> ltp : linesToPoints.entrySet()) {\n            Point2D[] p = ltp.getValue();\n            ltp.getKey().setLine(p[0], p[1]);\n        }\n    }\n\n    private static void snapByAxis(List<Point2D> points, float threshold, ToDoubleFunction<Point2D> getAxis, BiConsumer<Point2D, Double> setAxis) {\n        points.sort(Comparator.comparingDouble(getAxis));\n        List<List<Point2D>> groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Collections.singletonList(points.get(0))));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(getAxis.applyAsDouble(p) - getAxis.applyAsDouble(last.get(0))) < threshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Collections.singletonList(p)));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            double avgLoc = group.stream().mapToDouble(getAxis).average().orElse(0);\n            group.forEach(p -> setAxis.accept(p, avgLoc));\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDPage page, int dpi, ImageType imageType) throws IOException {\n        try (PDDocument document = new PDDocument()) {\n            document.addPage(page);\n            PDFRenderer renderer = new PDFRenderer(document);\n            document.close();\n            return renderer.renderImageWithDPI(0, dpi, imageType);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDDocument doc, PDPage page, int dpi, ImageType imageType) throws IOException {\n        PDFRenderer renderer = new PDFRenderer(doc);\n        return renderer.renderImageWithDPI(doc.getPages().indexOf(page), dpi, imageType);\n    }\n}\n```\n\nNow, I will run the tests to ensure that the code still works.",
        {
            "error": "Could not parse the response.",
            "format_instructions": "The output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"description\": \"Pydantic model for the ReAct agent's output. \", \"properties\": {\"thought\": {\"description\": \"Your current thought.\", \"title\": \"Thought\", \"type\": \"string\"}, \"action\": {\"description\": \"The tool to use.\", \"title\": \"Action\", \"type\": \"string\"}, \"tools_input\": {\"description\": \"The input to the action.\", \"title\": \"Tools Input\", \"type\": \"object\"}, \"observation\": {\"description\": \"Your observation.\", \"title\": \"Observation\", \"type\": \"string\"}}, \"required\": [\"thought\", \"action\", \"tools_input\", \"observation\"]}\n```"
        },
        {
            "thought": "I have refactored the `snapPoints` method in the `Utils.java` file to make it more readable and maintainable. Now, I need to run the tests to ensure that the code still works.",
            "action": "overwrite_file",
            "tools_input": {
                "filepath": "src/main/java/technology/tabula/Utils.java",
                "content": "package technology.tabula;\n\nimport java.awt.Shape;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.*;\nimport java.util.function.BiConsumer;\nimport java.util.function.ToDoubleFunction;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.cli.ParseException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\n/**\n * Utility class for various helper methods.\n */\npublic class Utils {\n    public static boolean within(double first, double second, double variance) {\n        return second < first + variance && second > first - variance;\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2, double variance) {\n        return within(y1, y2, variance) || (y2 <= y1 && y2 >= y1 - height1) || (y1 <= y2 && y1 >= y2 - height2);\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2) {\n        return overlap(y1, height1, y2, height2, 0.1f);\n    }\n\n    private final static float EPSILON = 0.01f;\n    protected static boolean useQuickSort = useCustomQuickSort();\n\n    public static boolean feq(double f1, double f2) {\n        return (Math.abs(f1 - f2) < EPSILON);\n    }\n\n    public static float round(double d, int decimalPlace) {\n        BigDecimal bd = new BigDecimal(Double.toString(d));\n        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\n        return bd.floatValue();\n    }\n\n    public static Rectangle bounds(Collection<? extends Shape> shapes) {\n        if (shapes.isEmpty()) {\n            throw new IllegalArgumentException(\"shapes can't be empty\");\n        }\n\n        Iterator<? extends Shape> iter = shapes.iterator();\n        Rectangle rv = new Rectangle();\n        rv.setRect(iter.next().getBounds2D());\n\n        while (iter.hasNext()) {\n            Rectangle2D.union(iter.next().getBounds2D(), rv, rv);\n        }\n\n        return rv;\n    }\n\n    // range iterator\n    public static List<Integer> range(final int begin, final int end) {\n        return new AbstractList<Integer>() {\n            @Override\n            public Integer get(int index) {\n                return begin + index;\n            }\n\n            @Override\n            public int size() {\n                return end - begin;\n            }\n        };\n    }\n\n    /* from apache.commons-lang */\n    public static boolean isNumeric(final CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        final int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isDigit(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String join(String glue, String... s) {\n        int k = s.length;\n        if (k == 0) {\n            return null;\n        }\n        StringBuilder out = new StringBuilder();\n        out.append(s[0]);\n        for (int x = 1; x < k; ++x) {\n            out.append(glue).append(s[x]);\n        }\n        return out.toString();\n    }\n\n    public static <T> List<List<T>> transpose(List<List<T>> table) {\n        List<List<T>> ret = new ArrayList<>();\n        final int N = table.get(0).size();\n        for (int i = 0; i < N; i++) {\n            List<T> col = new ArrayList<>();\n            for (List<T> row : table) {\n                col.add(row.get(i));\n            }\n            ret.add(col);\n        }\n        return ret;\n    }\n\n    /**\n     * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're\n     * running on JDK7+\n     */\n    public static <T extends Comparable<? super T>> void sort(List<T> list) {\n        if (useQuickSort) QuickSort.sort(list);\n        else              Collections.sort(list);\n    }\n\n    public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n        if (useQuickSort) QuickSort.sort(list, comparator);\n        else              Collections.sort(list, comparator);\n    }\n\n    private static boolean useCustomQuickSort() {\n        // taken from PDFBOX:\n\n        // check if we need to use the custom quicksort algorithm as a\n        // workaround to the transitivity issue of TextPositionComparator:\n        // https://issues.apache.org/jira/browse/PDFBOX-1512\n\n        String numberybits = System.getProperty(\"java.version\").split(\n                \"-\")[0]; // some Java version strings are 9-internal, which is dumb.\n        String[] versionComponents = numberybits.split(\n                \"\\\\.\");\n        int javaMajorVersion;\n        int javaMinorVersion;\n        if (versionComponents.length >= 2) {\n            javaMajorVersion = Integer.parseInt(versionComponents[0]);\n            javaMinorVersion = Integer.parseInt(versionComponents[1]);\n        } else {\n            javaMajorVersion = 1;\n            javaMinorVersion = Integer.parseInt(versionComponents[0]);\n        }\n        boolean is16orLess = javaMajorVersion == 1 && javaMinorVersion <= 6;\n        String useLegacySort = System.getProperty(\"java.util.Arrays.useLegacyMergeSort\");\n        return !is16orLess || (useLegacySort != null && useLegacySort.equals(\"true\"));\n    }\n\n    public static List<Integer> parsePagesOption(String pagesSpec) throws ParseException {\n        if (pagesSpec.equals(\"all\")) {\n            return null;\n        }\n\n        List<Integer> rv = new ArrayList<>();\n\n        String[] ranges = pagesSpec.split(\",\");\n        for (int i = 0; i < ranges.length; i++) {\n            String[] r = ranges[i].split(\"-\");\n            if (r.length == 0 || !Utils.isNumeric(r[0]) || r.length > 1 && !Utils.isNumeric(r[1])) {\n                throw new ParseException(\"Syntax error in page range specification\");\n            }\n\n            if (r.length < 2) {\n                rv.add(Integer.parseInt(r[0]));\n            } else {\n                int t = Integer.parseInt(r[0]);\n                int f = Integer.parseInt(r[1]);\n                if (t > f) {\n                    throw new ParseException(\"Syntax error in page range specification\");\n                }\n                rv.addAll(Utils.range(t, f + 1));\n            }\n        }\n\n        Collections.sort(rv);\n        return rv;\n    }\n\n    public static void snapPoints(List<? extends Line2D.Float> rulings, float xThreshold, float yThreshold) {\n        Map<Line2D.Float, Point2D[]> linesToPoints = new HashMap<>();\n        List<Point2D> points = new ArrayList<>();\n        for (Line2D.Float r : rulings) {\n            Point2D p1 = r.getP1();\n            Point2D p2 = r.getP2();\n            linesToPoints.put(r, new Point2D[]{p1, p2});\n            points.add(p1);\n            points.add(p2);\n        }\n\n        snapByAxis(points, xThreshold, Point2D::getX, Point2D::setLocation);\n        snapByAxis(points, yThreshold, Point2D::getY, (p, avg) -> p.setLocation(p.getX(), avg));\n\n        for (Map.Entry<Line2D.Float, Point2D[]> ltp : linesToPoints.entrySet()) {\n            Point2D[] p = ltp.getValue();\n            ltp.getKey().setLine(p[0], p[1]);\n        }\n    }\n\n    private static void snapByAxis(List<Point2D> points, float threshold, ToDoubleFunction<Point2D> getAxis, BiConsumer<Point2D, Double> setAxis) {\n        points.sort(Comparator.comparingDouble(getAxis));\n        List<List<Point2D>> groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Collections.singletonList(points.get(0))));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(getAxis.applyAsDouble(p) - getAxis.applyAsDouble(last.get(0))) < threshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Collections.singletonList(p)));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            double avgLoc = group.stream().mapToDouble(getAxis).average().orElse(0);\n            group.forEach(p -> setAxis.accept(p, avgLoc));\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDPage page, int dpi, ImageType imageType) throws IOException {\n        try (PDDocument document = new PDDocument()) {\n            document.addPage(page);\n            PDFRenderer renderer = new PDFRenderer(document);\n            document.close();\n            return renderer.renderImageWithDPI(0, dpi, imageType);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDDocument doc, PDPage page, int dpi, ImageType imageType) throws IOException {\n        PDFRenderer renderer = new PDFRenderer(doc);\n        return renderer.renderImageWithDPI(doc.getPages().indexOf(page), dpi, imageType);\n    }\n}\n"
            },
            "observation": "The file has been overwritten with the refactored code. Now, I will run the tests to ensure that the code still works."
        },
        {
            "tool": "overwrite_file",
            "result": "Refactoring failed. Changes have been reverted. Output: Compilation Error: [ERROR] COMPILATION ERROR : \n[ERROR] /Users/I539028/Desktop/Seminar/refactoring-lab/samples/java_tabula/src/main/java/technology/tabula/Utils.java:[201,55] incompatible types: invalid method reference\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.13.0:compile (default-compile) on project tabula: Compilation failure\n[ERROR] /Users/I539028/Desktop/Seminar/refactoring-lab/samples/java_tabula/src/main/java/technology/tabula/Utils.java:[201,55] incompatible types: invalid method reference\n[ERROR]     incompatible types: java.awt.geom.Point2D cannot be converted to double\n[ERROR] \n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException."
        },
        "The compilation error indicates that there is an issue with the method reference in the `snapByAxis` method. Specifically, the method reference `Point2D::setLocation` is not compatible because it expects a `double` but receives a `Point2D`.\n\nTo fix this, I will modify the `snapByAxis` method to use a lambda expression instead of a method reference for setting the location.\n\n### Updated Plan:\n1. Replace the method reference `Point2D::setLocation` with a lambda expression that correctly sets the location.\n\nLet's proceed with the updated refactoring.\n\n```java\npackage technology.tabula;\n\nimport java.awt.Shape;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.*;\nimport java.util.function.BiConsumer;\nimport java.util.function.ToDoubleFunction;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.cli.ParseException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\n/**\n * Utility class for various helper methods.\n */\npublic class Utils {\n    public static boolean within(double first, double second, double variance) {\n        return second < first + variance && second > first - variance;\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2, double variance) {\n        return within(y1, y2, variance) || (y2 <= y1 && y2 >= y1 - height1) || (y1 <= y2 && y1 >= y2 - height2);\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2) {\n        return overlap(y1, height1, y2, height2, 0.1f);\n    }\n\n    private final static float EPSILON = 0.01f;\n    protected static boolean useQuickSort = useCustomQuickSort();\n\n    public static boolean feq(double f1, double f2) {\n        return (Math.abs(f1 - f2) < EPSILON);\n    }\n\n    public static float round(double d, int decimalPlace) {\n        BigDecimal bd = new BigDecimal(Double.toString(d));\n        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\n        return bd.floatValue();\n    }\n\n    public static Rectangle bounds(Collection<? extends Shape> shapes) {\n        if (shapes.isEmpty()) {\n            throw new IllegalArgumentException(\"shapes can't be empty\");\n        }\n\n        Iterator<? extends Shape> iter = shapes.iterator();\n        Rectangle rv = new Rectangle();\n        rv.setRect(iter.next().getBounds2D());\n\n        while (iter.hasNext()) {\n            Rectangle2D.union(iter.next().getBounds2D(), rv, rv);\n        }\n\n        return rv;\n    }\n\n    // range iterator\n    public static List<Integer> range(final int begin, final int end) {\n        return new AbstractList<Integer>() {\n            @Override\n            public Integer get(int index) {\n                return begin + index;\n            }\n\n            @Override\n            public int size() {\n                return end - begin;\n            }\n        };\n    }\n\n    /* from apache.commons-lang */\n    public static boolean isNumeric(final CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        final int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isDigit(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String join(String glue, String... s) {\n        int k = s.length;\n        if (k == 0) {\n            return null;\n        }\n        StringBuilder out = new StringBuilder();\n        out.append(s[0]);\n        for (int x = 1; x < k; ++x) {\n            out.append(glue).append(s[x]);\n        }\n        return out.toString();\n    }\n\n    public static <T> List<List<T>> transpose(List<List<T>> table) {\n        List<List<T>> ret = new ArrayList<>();\n        final int N = table.get(0).size();\n        for (int i = 0; i < N; i++) {\n            List<T> col = new ArrayList<>();\n            for (List<T> row : table) {\n                col.add(row.get(i));\n            }\n            ret.add(col);\n        }\n        return ret;\n    }\n\n    /**\n     * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're\n     * running on JDK7+\n     */\n    public static <T extends Comparable<? super T>> void sort(List<T> list) {\n        if (useQuickSort) QuickSort.sort(list);\n        else              Collections.sort(list);\n    }\n\n    public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n        if (useQuickSort) QuickSort.sort(list, comparator);\n        else              Collections.sort(list, comparator);\n    }\n\n    private static boolean useCustomQuickSort() {\n        // taken from PDFBOX:\n\n        // check if we need to use the custom quicksort algorithm as a\n        // workaround to the transitivity issue of TextPositionComparator:\n        // https://issues.apache.org/jira/browse/PDFBOX-1512\n\n        String numberybits = System.getProperty(\"java.version\").split(\n                \"-\")[0]; // some Java version strings are 9-internal, which is dumb.\n        String[] versionComponents = numberybits.split(\n                \"\\\\.\");\n        int javaMajorVersion;\n        int javaMinorVersion;\n        if (versionComponents.length >= 2) {\n            javaMajorVersion = Integer.parseInt(versionComponents[0]);\n            javaMinorVersion = Integer.parseInt(versionComponents[1]);\n        } else {\n            javaMajorVersion = 1;\n            javaMinorVersion = Integer.parseInt(versionComponents[0]);\n        }\n        boolean is16orLess = javaMajorVersion == 1 && javaMinorVersion <= 6;\n        String useLegacySort = System.getProperty(\"java.util.Arrays.useLegacyMergeSort\");\n        return !is16orLess || (useLegacySort != null && useLegacySort.equals(\"true\"));\n    }\n\n    public static List<Integer> parsePagesOption(String pagesSpec) throws ParseException {\n        if (pagesSpec.equals(\"all\")) {\n            return null;\n        }\n\n        List<Integer> rv = new ArrayList<>();\n\n        String[] ranges = pagesSpec.split(\",\");\n        for (int i = 0; i < ranges.length; i++) {\n            String[] r = ranges[i].split(\"-\");\n            if (r.length == 0 || !Utils.isNumeric(r[0]) || r.length > 1 && !Utils.isNumeric(r[1])) {\n                throw new ParseException(\"Syntax error in page range specification\");\n            }\n\n            if (r.length < 2) {\n                rv.add(Integer.parseInt(r[0]));\n            } else {\n                int t = Integer.parseInt(r[0]);\n                int f = Integer.parseInt(r[1]);\n                if (t > f) {\n                    throw new ParseException(\"Syntax error in page range specification\");\n                }\n                rv.addAll(Utils.range(t, f + 1));\n            }\n        }\n\n        Collections.sort(rv);\n        return rv;\n    }\n\n    public static void snapPoints(List<? extends Line2D.Float> rulings, float xThreshold, float yThreshold) {\n        Map<Line2D.Float, Point2D[]> linesToPoints = new HashMap<>();\n        List<Point2D> points = new ArrayList<>();\n        for (Line2D.Float r : rulings) {\n            Point2D p1 = r.getP1();\n            Point2D p2 = r.getP2();\n            linesToPoints.put(r, new Point2D[]{p1, p2});\n            points.add(p1);\n            points.add(p2);\n        }\n\n        snapByAxis(points, xThreshold, Point2D::getX, (p, avg) -> p.setLocation(avg, p.getY()));\n        snapByAxis(points, yThreshold, Point2D::getY, (p, avg) -> p.setLocation(p.getX(), avg));\n\n        for (Map.Entry<Line2D.Float, Point2D[]> ltp : linesToPoints.entrySet()) {\n            Point2D[] p = ltp.getValue();\n            ltp.getKey().setLine(p[0], p[1]);\n        }\n    }\n\n    private static void snapByAxis(List<Point2D> points, float threshold, ToDoubleFunction<Point2D> getAxis, BiConsumer<Point2D, Double> setAxis) {\n        points.sort(Comparator.comparingDouble(getAxis));\n        List<List<Point2D>> groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Collections.singletonList(points.get(0))));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(getAxis.applyAsDouble(p) - getAxis.applyAsDouble(last.get(0))) < threshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Collections.singletonList(p)));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            double avgLoc = group.stream().mapToDouble(getAxis).average().orElse(0);\n            group.forEach(p -> setAxis.accept(p, avgLoc));\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDPage page, int dpi, ImageType imageType) throws IOException {\n        try (PDDocument document = new PDDocument()) {\n            document.addPage(page);\n            PDFRenderer renderer = new PDFRenderer(document);\n            document.close();\n            return renderer.renderImageWithDPI(0, dpi, imageType);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDDocument doc, PDPage page, int dpi, ImageType imageType) throws IOException {\n        PDFRenderer renderer = new PDFRenderer(doc);\n        return renderer.renderImageWithDPI(doc.getPages().indexOf(page), dpi, imageType);\n    }\n}\n```\n\nNow, I will run the tests to ensure that the code still works.",
        {
            "error": "Could not parse the response.",
            "format_instructions": "The output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"description\": \"Pydantic model for the ReAct agent's output. \", \"properties\": {\"thought\": {\"description\": \"Your current thought.\", \"title\": \"Thought\", \"type\": \"string\"}, \"action\": {\"description\": \"The tool to use.\", \"title\": \"Action\", \"type\": \"string\"}, \"tools_input\": {\"description\": \"The input to the action.\", \"title\": \"Tools Input\", \"type\": \"object\"}, \"observation\": {\"description\": \"Your observation.\", \"title\": \"Observation\", \"type\": \"string\"}}, \"required\": [\"thought\", \"action\", \"tools_input\", \"observation\"]}\n```"
        },
        {
            "thought": "The compilation error was due to an invalid method reference. I have corrected the method reference by using a lambda expression. Now, I will overwrite the file with the corrected refactoring and run the tests to ensure that the code still works.",
            "action": "overwrite_file",
            "tools_input": {
                "filepath": "src/main/java/technology/tabula/Utils.java",
                "content": "package technology.tabula;\n\nimport java.awt.Shape;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.*;\nimport java.util.function.BiConsumer;\nimport java.util.function.ToDoubleFunction;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.cli.ParseException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\n/**\n * Utility class for various helper methods.\n */\npublic class Utils {\n    public static boolean within(double first, double second, double variance) {\n        return second < first + variance && second > first - variance;\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2, double variance) {\n        return within(y1, y2, variance) || (y2 <= y1 && y2 >= y1 - height1) || (y1 <= y2 && y1 >= y2 - height2);\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2) {\n        return overlap(y1, height1, y2, height2, 0.1f);\n    }\n\n    private final static float EPSILON = 0.01f;\n    protected static boolean useQuickSort = useCustomQuickSort();\n\n    public static boolean feq(double f1, double f2) {\n        return (Math.abs(f1 - f2) < EPSILON);\n    }\n\n    public static float round(double d, int decimalPlace) {\n        BigDecimal bd = new BigDecimal(Double.toString(d));\n        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\n        return bd.floatValue();\n    }\n\n    public static Rectangle bounds(Collection<? extends Shape> shapes) {\n        if (shapes.isEmpty()) {\n            throw new IllegalArgumentException(\"shapes can't be empty\");\n        }\n\n        Iterator<? extends Shape> iter = shapes.iterator();\n        Rectangle rv = new Rectangle();\n        rv.setRect(iter.next().getBounds2D());\n\n        while (iter.hasNext()) {\n            Rectangle2D.union(iter.next().getBounds2D(), rv, rv);\n        }\n\n        return rv;\n    }\n\n    // range iterator\n    public static List<Integer> range(final int begin, final int end) {\n        return new AbstractList<Integer>() {\n            @Override\n            public Integer get(int index) {\n                return begin + index;\n            }\n\n            @Override\n            public int size() {\n                return end - begin;\n            }\n        };\n    }\n\n    /* from apache.commons-lang */\n    public static boolean isNumeric(final CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        final int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isDigit(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String join(String glue, String... s) {\n        int k = s.length;\n        if (k == 0) {\n            return null;\n        }\n        StringBuilder out = new StringBuilder();\n        out.append(s[0]);\n        for (int x = 1; x < k; ++x) {\n            out.append(glue).append(s[x]);\n        }\n        return out.toString();\n    }\n\n    public static <T> List<List<T>> transpose(List<List<T>> table) {\n        List<List<T>> ret = new ArrayList<>();\n        final int N = table.get(0).size();\n        for (int i = 0; i < N; i++) {\n            List<T> col = new ArrayList<>();\n            for (List<T> row : table) {\n                col.add(row.get(i));\n            }\n            ret.add(col);\n        }\n        return ret;\n    }\n\n    /**\n     * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're\n     * running on JDK7+\n     */\n    public static <T extends Comparable<? super T>> void sort(List<T> list) {\n        if (useQuickSort) QuickSort.sort(list);\n        else              Collections.sort(list);\n    }\n\n    public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n        if (useQuickSort) QuickSort.sort(list, comparator);\n        else              Collections.sort(list, comparator);\n    }\n\n    private static boolean useCustomQuickSort() {\n        // taken from PDFBOX:\n\n        // check if we need to use the custom quicksort algorithm as a\n        // workaround to the transitivity issue of TextPositionComparator:\n        // https://issues.apache.org/jira/browse/PDFBOX-1512\n\n        String numberybits = System.getProperty(\"java.version\").split(\n                \"-\")[0]; // some Java version strings are 9-internal, which is dumb.\n        String[] versionComponents = numberybits.split(\n                \"\\\\.\");\n        int javaMajorVersion;\n        int javaMinorVersion;\n        if (versionComponents.length >= 2) {\n            javaMajorVersion = Integer.parseInt(versionComponents[0]);\n            javaMinorVersion = Integer.parseInt(versionComponents[1]);\n        } else {\n            javaMajorVersion = 1;\n            javaMinorVersion = Integer.parseInt(versionComponents[0]);\n        }\n        boolean is16orLess = javaMajorVersion == 1 && javaMinorVersion <= 6;\n        String useLegacySort = System.getProperty(\"java.util.Arrays.useLegacyMergeSort\");\n        return !is16orLess || (useLegacySort != null && useLegacySort.equals(\"true\"));\n    }\n\n    public static List<Integer> parsePagesOption(String pagesSpec) throws ParseException {\n        if (pagesSpec.equals(\"all\")) {\n            return null;\n        }\n\n        List<Integer> rv = new ArrayList<>();\n\n        String[] ranges = pagesSpec.split(\",\");\n        for (int i = 0; i < ranges.length; i++) {\n            String[] r = ranges[i].split(\"-\");\n            if (r.length == 0 || !Utils.isNumeric(r[0]) || r.length > 1 && !Utils.isNumeric(r[1])) {\n                throw new ParseException(\"Syntax error in page range specification\");\n            }\n\n            if (r.length < 2) {\n                rv.add(Integer.parseInt(r[0]));\n            } else {\n                int t = Integer.parseInt(r[0]);\n                int f = Integer.parseInt(r[1]);\n                if (t > f) {\n                    throw new ParseException(\"Syntax error in page range specification\");\n                }\n                rv.addAll(Utils.range(t, f + 1));\n            }\n        }\n\n        Collections.sort(rv);\n        return rv;\n    }\n\n    public static void snapPoints(List<? extends Line2D.Float> rulings, float xThreshold, float yThreshold) {\n        Map<Line2D.Float, Point2D[]> linesToPoints = new HashMap<>();\n        List<Point2D> points = new ArrayList<>();\n        for (Line2D.Float r : rulings) {\n            Point2D p1 = r.getP1();\n            Point2D p2 = r.getP2();\n            linesToPoints.put(r, new Point2D[]{p1, p2});\n            points.add(p1);\n            points.add(p2);\n        }\n\n        snapByAxis(points, xThreshold, Point2D::getX, (p, avg) -> p.setLocation(avg, p.getY()));\n        snapByAxis(points, yThreshold, Point2D::getY, (p, avg) -> p.setLocation(p.getX(), avg));\n\n        for (Map.Entry<Line2D.Float, Point2D[]> ltp : linesToPoints.entrySet()) {\n            Point2D[] p = ltp.getValue();\n            ltp.getKey().setLine(p[0], p[1]);\n        }\n    }\n\n    private static void snapByAxis(List<Point2D> points, float threshold, ToDoubleFunction<Point2D> getAxis, BiConsumer<Point2D, Double> setAxis) {\n        points.sort(Comparator.comparingDouble(getAxis));\n        List<List<Point2D>> groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Collections.singletonList(points.get(0))));\n\n        for (Point2D p : points.subList(1, points.size())) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(getAxis.applyAsDouble(p) - getAxis.applyAsDouble(last.get(0))) < threshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Collections.singletonList(p)));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            double avgLoc = group.stream().mapToDouble(getAxis).average().orElse(0);\n            group.forEach(p -> setAxis.accept(p, avgLoc));\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDPage page, int dpi, ImageType imageType) throws IOException {\n        try (PDDocument document = new PDDocument()) {\n            document.addPage(page);\n            PDFRenderer renderer = new PDFRenderer(document);\n            document.close();\n            return renderer.renderImageWithDPI(0, dpi, imageType);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDDocument doc, PDPage page, int dpi, ImageType imageType) throws IOException {\n        PDFRenderer renderer = new PDFRenderer(doc);\n        return renderer.renderImageWithDPI(doc.getPages().indexOf(page), dpi, imageType);\n    }\n}\n"
            },
            "observation": "The file has been overwritten with the corrected refactoring. Now, I will run the tests to ensure that the code still works."
        },
        {
            "tool": "overwrite_file",
            "result": "Refactoring failed. Changes have been reverted. Output: [ERROR] Tests run: 23, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 3.442 s <<< FAILURE! -- in technology.tabula.TestSpreadsheetExtractor\n[ERROR] technology.tabula.TestSpreadsheetExtractor.testSpreadsheetWithNoBoundingFrameShouldBeSpreadsheet -- Time elapsed: 0.078 s <<< FAILURE!\n[ERROR] technology.tabula.TestSpreadsheetExtractor.testSpanningCells -- Time elapsed: 0.042 s <<< FAILURE!\n[ERROR] Tests run: 8, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.247 s <<< FAILURE! -- in technology.tabula.TestWriters\n[ERROR] technology.tabula.TestWriters.testJSONSerializeTwoTables -- Time elapsed: 0.045 s <<< FAILURE!\n[ERROR] technology.tabula.TestWriters.testJSONSerializeInfinity -- Time elapsed: 0.050 s <<< FAILURE!\n[ERROR] Tests run: 13, Failures: 5, Errors: 0, Skipped: 0, Time elapsed: 1.155 s <<< FAILURE! -- in technology.tabula.TestCommandLineApp\n[ERROR] technology.tabula.TestCommandLineApp.testExtractJSONWithArea -- Time elapsed: 0.026 s <<< FAILURE!\n[ERROR] technology.tabula.TestCommandLineApp.testLatticeModeWithColumnAndMultipleAreasOption -- Time elapsed: 0.007 s <<< FAILURE!\n[ERROR] technology.tabula.TestCommandLineApp.testExtractBatchSpreadsheetWithArea -- Time elapsed: 0.042 s <<< FAILURE!\n[ERROR] technology.tabula.TestCommandLineApp.testExtractSpreadsheetWithAreaAndNewFile -- Time elapsed: 0.043 s <<< FAILURE!\n[ERROR] technology.tabula.TestCommandLineApp.testExtractSpreadsheetWithArea -- Time elapsed: 0.032 s <<< FAILURE!\n[ERROR] Failures: \n[ERROR]   TestCommandLineApp.testExtractBatchSpreadsheetWithArea:66 arrays first differed at element [71]; expected:<34> but was:<44>\n[ERROR]   TestCommandLineApp.testExtractJSONWithArea:91 expected:<...50.56,\"left\":119.789[444,\"width\":355.31939697265625,\"height\":266.5108642578125,\"right\":475.10883,\"bottom\":417.07086,\"data\":[[{\"top\":150.56,\"left\":119.789444,\"width\":355.31939697265625,\"height\":8.897811889648438,\"text\":\"Improved operation scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":159.45781,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.785446166992188,\"text\":\"Volume servers in:\"},{\"top\":159.45781,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.785446166992188,\"text\":\"2007\"},{\"top\":159.45781,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.785446166992188,\"text\":\"2008\"},{\"top\":159.45781,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.785446166992188,\"text\":\"2009\"},{\"top\":159.45781,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.785446166992188,\"text\":\"2010\"},{\"top\":159.45781,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.785446166992188,\"text\":\"2011\"}],[{\"top\":172.24326,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.832427978515625,\"text\":\"Server closets\"},{\"top\":172.24326,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.832427978515625,\"text\":\"1,505\"},{\"top\":172.24326,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.832427978515625,\"text\":\"1,580\"},{\"top\":172.24326,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.832427978515625,\"text\":\"1,643\"},{\"top\":172.24326,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.832427978515625,\"text\":\"1,673\"},{\"top\":172.24326,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.832427978515625,\"text\":\"1,689\"}],[{\"top\":185.07568,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.891036987304688,\"text\":\"Server rooms\"},{\"top\":185.07568,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.891036987304688,\"text\":\"1,512\"},{\"top\":185.07568,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.891036987304688,\"text\":\"1,586\"},{\"top\":185.07568,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.891036987304688,\"text\":\"1,646\"},{\"top\":185.07568,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.891036987304688,\"text\":\"1,677\"},{\"top\":185.07568,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.891036987304688,\"text\":\"1,693\"}],[{\"top\":197.96672,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.890411376953125,\"text\":\"Localized data centers\"},{\"top\":197.96672,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890411376953125,\"text\":\"1,512\"},{\"top\":197.96672,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890411376953125,\"text\":\"1,586\"},{\"top\":197.96672,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890411376953125,\"text\":\"1,646\"},{\"top\":197.96672,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.890411376953125,\"text\":\"1,677\"},{\"top\":197.96672,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.890411376953125,\"text\":\"1,693\"}],[{\"top\":210.85713,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.890716552734375,\"text\":\"Mid-tier data centers\"},{\"top\":210.85713,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890716552734375,\"text\":\"1,512\"},{\"top\":210.85713,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890716552734375,\"text\":\"1,586\"},{\"top\":210.85713,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890716552734375,\"text\":\"1,646\"},{\"top\":210.85713,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.890716552734375,\"text\":\"1,677\"},{\"top\":210.85713,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.890716552734375,\"text\":\"1,693\"}],[{\"top\":223.74785,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.785003662109375,\"text\":\"Enterprise-class data centers\"},{\"top\":223.74785,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.785003662109375,\"text\":\"1,512\"},{\"top\":223.74785,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.785003662109375,\"text\":\"1,586\"},{\"top\":223.74785,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.785003662109375,\"text\":\"1,646\"},{\"top\":223.74785,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.785003662109375,\"text\":\"1,677\"},{\"top\":223.74785,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.785003662109375,\"text\":\"1,693\"}],[{\"top\":236.53285,\"left\":119.789444,\"width\":355.31939697265625,\"height\":13.1025390625,\"text\":\"Best practice scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":249.63539,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.726882934570312,\"text\":\"Volume servers in:\"},{\"top\":249.63539,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.726882934570312,\"text\":\"2007\"},{\"top\":249.63539,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.726882934570312,\"text\":\"2008\"},{\"top\":249.63539,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.726882934570312,\"text\":\"2009\"},{\"top\":249.63539,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.726882934570312,\"text\":\"2010\"},{\"top\":249.63539,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.726882934570312,\"text\":\"2011\"}],[{\"top\":262.36227,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.890472412109375,\"text\":\"Server closets\"},{\"top\":262.36227,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890472412109375,\"text\":\"1,456\"},{\"top\":262.36227,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890472412109375,\"text\":\"1,439\"},{\"top\":262.36227,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890472412109375,\"text\":\"1,386\"},{\"top\":262.36227,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.890472412109375,\"text\":\"1,296\"},{\"top\":262.36227,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.890472412109375,\"text\":\"1,326\"}],[{\"top\":275.25275,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.8914794921875,\"text\":\"Server rooms\"},{\"top\":275.25275,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.8914794921875,\"text\":\"1,465\"},{\"top\":275.25275,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.8914794921875,\"text\":\"1,472\"},{\"top\":275.25275,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.8914794921875,\"text\":\"1,427\"},{\"top\":275.25275,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.8914794921875,\"text\":\"1,334\"},{\"top\":275.25275,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.8914794921875,\"text\":\"1,371\"}],[{\"top\":288.14423,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.890167236328125,\"text\":\"Localized data centers\"},{\"top\":288.14423,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890167236328125,\"text\":\"1,465\"},{\"top\":288.14423,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890167236328125,\"text\":\"1,471\"},{\"top\":288.14423,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890167236328125,\"text\":\"1,426\"},{\"top\":288.14423,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.890167236328125,\"text\":\"1,334\"},{\"top\":288.14423,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.890167236328125,\"text\":\"1,371\"}],[{\"top\":301.0344,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.890472412109375,\"text\":\"Mid-tier data centers\"},{\"top\":301.0344,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890472412109375,\"text\":\"1,465\"},{\"top\":301.0344,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890472412109375,\"text\":\"1,471\"},{\"top\":301.0344,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890472412109375,\"text\":\"1,426\"},{\"top\":301.0344,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.890472412109375,\"text\":\"1,334\"},{\"top\":301.0344,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.890472412109375,\"text\":\"1,371\"}],[{\"top\":313.92487,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.785552978515625,\"text\":\"Enterprise-class data centers\"},{\"top\":313.92487,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.785552978515625,\"text\":\"1,465\"},{\"top\":313.92487,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.785552978515625,\"text\":\"1,471\"},{\"top\":313.92487,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.785552978515625,\"text\":\"1,426\"},{\"top\":313.92487,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.785552978515625,\"text\":\"1,334\"},{\"top\":313.92487,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.785552978515625,\"text\":\"1,371\"}],[{\"top\":326.71042,\"left\":119.789444,\"width\":355.31939697265625,\"height\":13.04400634765625,\"text\":\"State-of-the-art scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":339.75443,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.784942626953125,\"text\":\"Volume servers in:\"},{\"top\":339.75443,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.784942626953125,\"text\":\"2007\"},{\"top\":339.75443,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.784942626953125,\"text\":\"2008\"},{\"top\":339.75443,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.784942626953125,\"text\":\"2009\"},{\"top\":339.75443,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.784942626953125,\"text\":\"2010\"},{\"top\":339.75443,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.784942626953125,\"text\":\"2011\"}],[{\"top\":352.53937,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.89111328125,\"text\":\"Server closets\"},{\"top\":352.53937,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.89111328125,\"text\":\"1,485\"},{\"top\":352.53937,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.89111328125,\"text\":\"1,471\"},{\"top\":352.53937,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.89111328125,\"text\":\"1,424\"},{\"top\":352.53937,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.89111328125,\"text\":\"1,315\"},{\"top\":352.53937,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.89111328125,\"text\":\"1,349\"}],[{\"top\":365.43048,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.8902587890625,\"text\":\"Server rooms\"},{\"top\":365.43048,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.8902587890625,\"text\":\"1,495\"},{\"top\":365.43048,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.8902587890625,\"text\":\"1,573\"},{\"top\":365.43048,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.8902587890625,\"text\":\"1,586\"},{\"top\":365.43048,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.8902587890625,\"text\":\"1,424\"},{\"top\":365.43048,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.8902587890625,\"text\":\"1,485\"}],[{\"top\":378.32074,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.891143798828125,\"text\":\"Localized data centers\"},{\"top\":378.32074,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.891143798828125,\"text\":\"1,495\"},{\"top\":378.32074,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.891143798828125,\"text\":\"1,572\"},{\"top\":378.32074,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.891143798828125,\"text\":\"1,585\"},{\"top\":378.32074,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.891143798828125,\"text\":\"1,424\"},{\"top\":378.32074,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.891143798828125,\"text\":\"1,485\"}],[{\"top\":391.21188,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.89068603515625,\"text\":\"Mid-tier data centers\"},{\"top\":391.21188,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.89068603515625,\"text\":\"1,495\"},{\"top\":391.21188,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.89068603515625,\"text\":\"1,572\"},{\"top\":391.21188,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.89068603515625,\"text\":\"1,585\"},{\"top\":391.21188,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.89068603515625,\"text\":\"1,424\"},{\"top\":391.21188,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.89068603515625,\"text\":\"1,485\"}],[{\"top\":404.10257,\"left\":119.789444,\"width\":121.92678833007812,\"height\":12.968292236328125,\"text\":\"Enterprise-class data centers\"},{\"top\":404.10257,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.968292236328125,\"text\":\"1,495\"},{\"top\":404.10257,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.968292236328125,\"text\":\"1,572\"},{\"top\":404.10257,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.968292236328125,\"text\":\"1,585\"},{\"top\":404.10257,\"left\":381.7078,\"width\":46.663330078125,\"height\":12.968292236328125,\"text\":\"1,424\"},{\"top\":404.10257,\"left\":428.37112,\"width\":46.73773193359375,\"height\":12.968292236328125,\"text\":\"1,485\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":538.25964,\"left\":130.8136,\"width\":333.3038024902344,\"height\":51.5423583984375,\"right\":464.1174,\"bottom\":589.802,\"data\":[[{\"top\":538.25964,\"left\":130.8136,\"width\":333.3038024902344,\"height\":12.88055419921875,\"text\":\"All alternative scenarios\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":551.1402,\"left\":130.8136,\"width\":99.93739318847656,\"height\":12.784912109375,\"text\":\"Server class\"},{\"top\":551.1402,\"left\":230.75099,\"width\":46.66316223144531,\"height\":12.784912109375,\"text\":\"2007\"},{\"top\":551.1402,\"left\":277.41415,\"width\":46.663726806640625,\"height\":12.784912109375,\"text\":\"2008\"},{\"top\":551.1402,\"left\":324.07788,\"width\":46.663970947265625,\"height\":12.784912109375,\"text\":\"2009\"},{\"top\":551.1402,\"left\":370.74185,\"width\":46.663177490234375,\"height\":12.784912109375,\"text\":\"2010\"},{\"top\":551.1402,\"left\":417.40503,\"width\":46.712371826171875,\"height\":12.784912109375,\"text\":\"2011\"}],[{\"top\":563.9251,\"left\":130.8136,\"width\":99.93739318847656,\"height\":12.8905029296875,\"text\":\"Mid-range\"},{\"top\":563.9251,\"left\":230.75099,\"width\":46.66316223144531,\"height\":12.8905029296875,\"text\":\"4,921\"},{\"top\":563.9251,\"left\":277.41415,\"width\":46.663726806640625,\"height\":12.8905029296875,\"text\":\"5,467\"},{\"top\":563.9251,\"left\":324.07788,\"width\":46.663970947265625,\"height\":12.8905029296875,\"text\":\"6,152\"},{\"top\":563.9251,\"left\":370.74185,\"width\":46.663177490234375,\"height\":12.8905029296875,\"text\":\"6,649\"},{\"top\":563.9251,\"left\":417.40503,\"width\":46.712371826171875,\"height\":12.8905029296875,\"text\":\"7,185\"}],[{\"top\":576.8156,\"left\":130.8136,\"width\":99.93739318847656,\"height\":12.98638916015625,\"text\":\"High-end\"},{\"top\":576.8156,\"left\":230.75099,\"width\":46.66316223144531,\"height\":12.98638916015625,\"text\":\"76,295\"},{\"top\":576.8156,\"left\":277.41415,\"width\":46.663726806640625,\"height\":12.98638916015625,\"text\":\"81,624\"},{\"top\":576.8156,\"left\":324.07788,\"width\":46.663970947265625,\"height\":12.98638916015625,\"text\":\"86,849\"},{\"top\":576.8156,\"left\":370.74185,\"width\":46.663177490234375,\"height\":12.98638916015625,\"text\":\"92,662\"},{\"top\":576.8156,\"left\":417.40503,\"width\":46.712371826171875,\"height\":12.986389]16015625,\"text\":\"98,...> but was:<...50.56,\"left\":119.789[185,\"width\":355.314453125,\"height\":266.51080322265625,\"right\":475.10364,\"bottom\":417.0708,\"data\":[[{\"top\":150.56,\"left\":119.789185,\"width\":355.314453125,\"height\":8.897903442382812,\"text\":\"Improved operation scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":159.4579,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.785507202148438,\"text\":\"Volume servers in:\"},{\"top\":159.4579,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.785507202148438,\"text\":\"2007\"},{\"top\":159.4579,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.785507202148438,\"text\":\"2008\"},{\"top\":159.4579,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.785507202148438,\"text\":\"2009\"},{\"top\":159.4579,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.785507202148438,\"text\":\"2010\"},{\"top\":159.4579,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.785507202148438,\"text\":\"2011\"}],[{\"top\":172.24341,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.83221435546875,\"text\":\"Server closets\"},{\"top\":172.24341,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.83221435546875,\"text\":\"1,505\"},{\"top\":172.24341,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.83221435546875,\"text\":\"1,580\"},{\"top\":172.24341,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.83221435546875,\"text\":\"1,643\"},{\"top\":172.24341,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.83221435546875,\"text\":\"1,673\"},{\"top\":172.24341,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.83221435546875,\"text\":\"1,689\"}],[{\"top\":185.07562,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Server rooms\"},{\"top\":185.07562,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,512\"},{\"top\":185.07562,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,586\"},{\"top\":185.07562,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,646\"},{\"top\":185.07562,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,677\"},{\"top\":185.07562,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,693\"}],[{\"top\":197.96661,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890380859375,\"text\":\"Localized data centers\"},{\"top\":197.96661,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890380859375,\"text\":\"1,512\"},{\"top\":197.96661,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890380859375,\"text\":\"1,586\"},{\"top\":197.96661,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,646\"},{\"top\":197.96661,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,677\"},{\"top\":197.96661,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890380859375,\"text\":\"1,693\"}],[{\"top\":210.857,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Mid-tier data centers\"},{\"top\":210.857,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,512\"},{\"top\":210.857,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,586\"},{\"top\":210.857,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,646\"},{\"top\":210.857,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,677\"},{\"top\":210.857,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,693\"}],[{\"top\":223.74799,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.784912109375,\"text\":\"Enterprise-class data centers\"},{\"top\":223.74799,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.784912109375,\"text\":\"1,512\"},{\"top\":223.74799,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.784912109375,\"text\":\"1,586\"},{\"top\":223.74799,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"1,646\"},{\"top\":223.74799,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"1,677\"},{\"top\":223.74799,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.784912109375,\"text\":\"1,693\"}],[{\"top\":236.5329,\"left\":119.789185,\"width\":355.314453125,\"height\":13.10260009765625,\"text\":\"Best practice scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":249.6355,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.726715087890625,\"text\":\"Volume servers in:\"},{\"top\":249.6355,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.726715087890625,\"text\":\"2007\"},{\"top\":249.6355,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.726715087890625,\"text\":\"2008\"},{\"top\":249.6355,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.726715087890625,\"text\":\"2009\"},{\"top\":249.6355,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.726715087890625,\"text\":\"2010\"},{\"top\":249.6355,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.726715087890625,\"text\":\"2011\"}],[{\"top\":262.3622,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890380859375,\"text\":\"Server closets\"},{\"top\":262.3622,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890380859375,\"text\":\"1,456\"},{\"top\":262.3622,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890380859375,\"text\":\"1,439\"},{\"top\":262.3622,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,386\"},{\"top\":262.3622,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,296\"},{\"top\":262.3622,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890380859375,\"text\":\"1,326\"}],[{\"top\":275.2526,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8916015625,\"text\":\"Server rooms\"},{\"top\":275.2526,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8916015625,\"text\":\"1,465\"},{\"top\":275.2526,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8916015625,\"text\":\"1,472\"},{\"top\":275.2526,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8916015625,\"text\":\"1,427\"},{\"top\":275.2526,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8916015625,\"text\":\"1,334\"},{\"top\":275.2526,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8916015625,\"text\":\"1,371\"}],[{\"top\":288.1442,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890411376953125,\"text\":\"Localized data centers\"},{\"top\":288.1442,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890411376953125,\"text\":\"1,465\"},{\"top\":288.1442,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890411376953125,\"text\":\"1,471\"},{\"top\":288.1442,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,426\"},{\"top\":288.1442,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,334\"},{\"top\":288.1442,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890411376953125,\"text\":\"1,371\"}],[{\"top\":301.0346,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890411376953125,\"text\":\"Mid-tier data centers\"},{\"top\":301.0346,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890411376953125,\"text\":\"1,465\"},{\"top\":301.0346,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890411376953125,\"text\":\"1,471\"},{\"top\":301.0346,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,426\"},{\"top\":301.0346,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,334\"},{\"top\":301.0346,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890411376953125,\"text\":\"1,371\"}],[{\"top\":313.92502,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.785491943359375,\"text\":\"Enterprise-class data centers\"},{\"top\":313.92502,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.785491943359375,\"text\":\"1,465\"},{\"top\":313.92502,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.785491943359375,\"text\":\"1,471\"},{\"top\":313.92502,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.785491943359375,\"text\":\"1,426\"},{\"top\":313.92502,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.785491943359375,\"text\":\"1,334\"},{\"top\":313.92502,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.785491943359375,\"text\":\"1,371\"}],[{\"top\":326.7105,\"left\":119.789185,\"width\":355.314453125,\"height\":13.043792724609375,\"text\":\"State-of-the-art scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":339.7543,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.784912109375,\"text\":\"Volume servers in:\"},{\"top\":339.7543,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.784912109375,\"text\":\"2007\"},{\"top\":339.7543,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.784912109375,\"text\":\"2008\"},{\"top\":339.7543,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"2009\"},{\"top\":339.7543,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"2010\"},{\"top\":339.7543,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.784912109375,\"text\":\"2011\"}],[{\"top\":352.5392,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Server closets\"},{\"top\":352.5392,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,485\"},{\"top\":352.5392,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,471\"},{\"top\":352.5392,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,424\"},{\"top\":352.5392,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,315\"},{\"top\":352.5392,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,349\"}],[{\"top\":365.4302,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890411376953125,\"text\":\"Server rooms\"},{\"top\":365.4302,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890411376953125,\"text\":\"1,495\"},{\"top\":365.4302,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890411376953125,\"text\":\"1,573\"},{\"top\":365.4302,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,586\"},{\"top\":365.4302,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,424\"},{\"top\":365.4302,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890411376953125,\"text\":\"1,485\"}],[{\"top\":378.32062,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Localized data centers\"},{\"top\":378.32062,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,495\"},{\"top\":378.32062,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,572\"},{\"top\":378.32062,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,585\"},{\"top\":378.32062,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,424\"},{\"top\":378.32062,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,485\"}],[{\"top\":391.2116,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Mid-tier data centers\"},{\"top\":391.2116,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,495\"},{\"top\":391.2116,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,572\"},{\"top\":391.2116,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,585\"},{\"top\":391.2116,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,424\"},{\"top\":391.2116,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,485\"}],[{\"top\":404.1026,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.96820068359375,\"text\":\"Enterprise-class data centers\"},{\"top\":404.1026,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.96820068359375,\"text\":\"1,495\"},{\"top\":404.1026,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.96820068359375,\"text\":\"1,572\"},{\"top\":404.1026,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.96820068359375,\"text\":\"1,585\"},{\"top\":404.1026,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.96820068359375,\"text\":\"1,424\"},{\"top\":404.1026,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.96820068359375,\"text\":\"1,485\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":538.25977,\"left\":130.81358,\"width\":333.30413818359375,\"height\":51.52655029296875,\"right\":464.11774,\"bottom\":589.7863,\"data\":[[{\"top\":538.25977,\"left\":130.81358,\"width\":333.30413818359375,\"height\":12.8804931640625,\"text\":\"All alternative scenarios\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":551.14026,\"left\":130.81358,\"width\":99.93740844726562,\"height\":12.784912109375,\"text\":\"Server class\"},{\"top\":551.14026,\"left\":230.75099,\"width\":46.66319274902344,\"height\":12.784912109375,\"text\":\"2007\"},{\"top\":551.14026,\"left\":277.41418,\"width\":46.663818359375,\"height\":12.784912109375,\"text\":\"2008\"},{\"top\":551.14026,\"left\":324.078,\"width\":46.663787841796875,\"height\":12.784912109375,\"text\":\"2009\"},{\"top\":551.14026,\"left\":370.7418,\"width\":46.663177490234375,\"height\":12.784912109375,\"text\":\"2010\"},{\"top\":551.14026,\"left\":417.40497,\"width\":46.712738037109375,\"height\":12.784912109375,\"text\":\"2011\"}],[{\"top\":563.9252,\"left\":130.81358,\"width\":99.93740844726562,\"height\":12.890380859375,\"text\":\"Mid-range\"},{\"top\":563.9252,\"left\":230.75099,\"width\":46.66319274902344,\"height\":12.890380859375,\"text\":\"4,921\"},{\"top\":563.9252,\"left\":277.41418,\"width\":46.663818359375,\"height\":12.890380859375,\"text\":\"5,467\"},{\"top\":563.9252,\"left\":324.078,\"width\":46.663787841796875,\"height\":12.890380859375,\"text\":\"6,152\"},{\"top\":563.9252,\"left\":370.7418,\"width\":46.663177490234375,\"height\":12.890380859375,\"text\":\"6,649\"},{\"top\":563.9252,\"left\":417.40497,\"width\":46.712738037109375,\"height\":12.890380859375,\"text\":\"7,185\"}],[{\"top\":576.81555,\"left\":130.81358,\"width\":99.93740844726562,\"height\":12.97076416015625,\"text\":\"High-end\"},{\"top\":576.81555,\"left\":230.75099,\"width\":46.66319274902344,\"height\":12.97076416015625,\"text\":\"76,295\"},{\"top\":576.81555,\"left\":277.41418,\"width\":46.663818359375,\"height\":12.97076416015625,\"text\":\"81,624\"},{\"top\":576.81555,\"left\":324.078,\"width\":46.663787841796875,\"height\":12.97076416015625,\"text\":\"86,849\"},{\"top\":576.81555,\"left\":370.7418,\"width\":46.663177490234375,\"height\":12.97076416015625,\"text\":\"92,662\"},{\"top\":576.81555,\"left\":417.40497,\"width\":46.712738037109375,\"height\":12.970764]16015625,\"text\":\"98,...>\n[ERROR]   TestCommandLineApp.testExtractSpreadsheetWithArea:37 expected:<...ntage,Absolute,\r\n[ERROR]   TestCommandLineApp.testExtractSpreadsheetWithAreaAndNewFile:82 arrays first differed at element [71]; expected:<34> but was:<44>\n[ERROR]   TestCommandLineApp.testLatticeModeWithColumnAndMultipleAreasOption:216 expected:<...22,\"height\":315.3640[7470703125,\"right\":298.0,\"bottom\":315.37057,\"data\":[[{\"top\":0.006499578,\"left\":56.8,\"width\":79.19999694824219,\"height\":95.31405639648438,\"text\":\"Animal\"},{\"top\":0.006499578,\"left\":136.0,\"width\":61.0,\"height\":95.31405639648438,\"text\":\"Action\"},{\"top\":0.006499578,\"left\":197.0,\"width\":101.0,\"height\":95.31405639648438,\"text\":\"Result\"}],[{\"top\":95.32056,\"left\":56.8,\"width\":79.19999694824219,\"height\":23.050010681152344,\"text\":\"Cat\"},{\"top\":95.32056,\"left\":136.0,\"width\":61.0,\"height\":23.050010681152344,\"text\":\"Says\"},{\"top\":95.32056,\"left\":197.0,\"width\":101.0,\"height\":23.050010681152344,\"text\":\"Meow\"}],[{\"top\":118.37057,\"left\":56.8,\"width\":79.19999694824219,\"height\":63.99999237060547,\"text\":\"Parastratiosph\\recomyiastratio\\rsphecomyioid\\res\"},{\"top\":118.37057,\"left\":136.0,\"width\":61.0,\"height\":63.99999237060547,\"text\":\"Says\"},{\"top\":118.37057,\"left\":197.0,\"width\":101.0,\"height\":63.99999237060547,\"text\":\"bzzzzzzz\"}],[{\"top\":182.37056,\"left\":56.8,\"width\":79.19999694824219,\"height\":133.00001525878906,\"text\":\"Fox\"},{\"top\":182.37056,\"left\":136.0,\"width\":61.0,\"height\":133.00001525878906,\"text\":\"Says\"},{\"top\":182.37056,\"left\":197.0,\"width\":101.0,\"height\":133.00001525878906,\"text\":\"Ring-\\rdingdingdingd\\ringeringeding\\rGering-\\rdingdingdingd\\ringeringeding\\rGering-\\rdingdingdingd\\ringeringeding\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":0.006499578,\"left\":313.35715,\"width\":241.55941772460938,\"height\":259.2640380859375,\"right\":554.91656,\"bottom\":259.27054,\"data\":[[{\"top\":0.006499578,\"left\":313.35715,\"width\":77.64285278320312,\"height\":72.26405334472656,\"text\":\"\"},{\"top\":0.006499578,\"left\":391.0,\"width\":66.0,\"height\":72.26405334472656,\"text\":\"\"},{\"top\":0.006499578,\"left\":457.0,\"width\":97.91656494140625,\"height\":72.26405334472656,\"text\":\"\"}],[{\"top\":72.27055,\"left\":313.35715,\"width\":77.64285278320312,\"height\":23.050003051757812,\"text\":\"Animal\"},{\"top\":72.27055,\"left\":391.0,\"width\":66.0,\"height\":23.050003051757812,\"text\":\"Action\"},{\"top\":72.27055,\"left\":457.0,\"width\":97.91656494140625,\"height\":23.050003051757812,\"text\":\"Result\"}],[{\"top\":95.32056,\"left\":313.35715,\"width\":77.64285278320312,\"height\":35.94999694824219,\"text\":\"Dogs/wolves/\\rMore dogs\"},{\"top\":95.32056,\"left\":391.0,\"width\":66.0,\"height\":35.94999694824219,\"text\":\"Says\"},{\"top\":95.32056,\"left\":457.0,\"width\":97.91656494140625,\"height\":35.94999694824219,\"text\":\"Bow-wow/\\rruff-ruff\"}],[{\"top\":131.27055,\"left\":313.35715,\"width\":77.64285278320312,\"height\":36.40000915527344,\"text\":\"Donkey\"},{\"top\":131.27055,\"left\":391.0,\"width\":66.0,\"height\":36.40000915527344,\"text\":\"Says\"},{\"top\":131.27055,\"left\":457.0,\"width\":97.91656494140625,\"height\":36.40000915527344,\"text\":\"Hee-Haw Hee-\\rHaw\"}],[{\"top\":167.67056,\"left\":313.35715,\"width\":77.64285278320312,\"height\":91.5999755859375,\"text\":\"Fox\"},{\"top\":167.67056,\"left\":391.0,\"width\":66.0,\"height\":91.5999755859375,\"text\":\"Says\"},{\"top\":167.67056,\"left\":457.0,\"width\":97.91656494140]625,\"height\":91.5999...> but was:<...22,\"height\":315.3640[441894531,\"right\":298.0,\"bottom\":315.37054,\"data\":[[{\"top\":0.006499578,\"left\":56.8,\"width\":79.19999694824219,\"height\":95.3140640258789,\"text\":\"Animal\"},{\"top\":0.006499578,\"left\":136.0,\"width\":61.0,\"height\":95.3140640258789,\"text\":\"Action\"},{\"top\":0.006499578,\"left\":197.0,\"width\":101.0,\"height\":95.3140640258789,\"text\":\"Result\"}],[{\"top\":95.320564,\"left\":56.8,\"width\":79.19999694824219,\"height\":23.050003051757812,\"text\":\"Cat\"},{\"top\":95.320564,\"left\":136.0,\"width\":61.0,\"height\":23.050003051757812,\"text\":\"Says\"},{\"top\":95.320564,\"left\":197.0,\"width\":101.0,\"height\":23.050003051757812,\"text\":\"Meow\"}],[{\"top\":118.37057,\"left\":56.8,\"width\":79.19999694824219,\"height\":63.99999237060547,\"text\":\"Parastratiosph\\recomyiastratio\\rsphecomyioid\\res\"},{\"top\":118.37057,\"left\":136.0,\"width\":61.0,\"height\":63.99999237060547,\"text\":\"Says\"},{\"top\":118.37057,\"left\":197.0,\"width\":101.0,\"height\":63.99999237060547,\"text\":\"bzzzzzzz\"}],[{\"top\":182.37056,\"left\":56.8,\"width\":79.19999694824219,\"height\":132.99998474121094,\"text\":\"Fox\"},{\"top\":182.37056,\"left\":136.0,\"width\":61.0,\"height\":132.99998474121094,\"text\":\"Says\"},{\"top\":182.37056,\"left\":197.0,\"width\":101.0,\"height\":132.99998474121094,\"text\":\"Ring-\\rdingdingdingd\\ringeringeding\\rGering-\\rdingdingdingd\\ringeringeding\\rGering-\\rdingdingdingd\\ringeringeding\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":0.006499578,\"left\":313.35715,\"width\":241.55947875976562,\"height\":259.2640380859375,\"right\":554.9166,\"bottom\":259.27054,\"data\":[[{\"top\":0.006499578,\"left\":313.35715,\"width\":77.64285278320312,\"height\":72.26405334472656,\"text\":\"\"},{\"top\":0.006499578,\"left\":391.0,\"width\":66.0,\"height\":72.26405334472656,\"text\":\"\"},{\"top\":0.006499578,\"left\":457.0,\"width\":97.9166259765625,\"height\":72.26405334472656,\"text\":\"\"}],[{\"top\":72.27055,\"left\":313.35715,\"width\":77.64285278320312,\"height\":23.050010681152344,\"text\":\"Animal\"},{\"top\":72.27055,\"left\":391.0,\"width\":66.0,\"height\":23.050010681152344,\"text\":\"Action\"},{\"top\":72.27055,\"left\":457.0,\"width\":97.9166259765625,\"height\":23.050010681152344,\"text\":\"Result\"}],[{\"top\":95.320564,\"left\":313.35715,\"width\":77.64285278320312,\"height\":35.949989318847656,\"text\":\"Dogs/wolves/\\rMore dogs\"},{\"top\":95.320564,\"left\":391.0,\"width\":66.0,\"height\":35.949989318847656,\"text\":\"Says\"},{\"top\":95.320564,\"left\":457.0,\"width\":97.9166259765625,\"height\":35.949989318847656,\"text\":\"Bow-wow/\\rruff-ruff\"}],[{\"top\":131.27055,\"left\":313.35715,\"width\":77.64285278320312,\"height\":36.40000915527344,\"text\":\"Donkey\"},{\"top\":131.27055,\"left\":391.0,\"width\":66.0,\"height\":36.40000915527344,\"text\":\"Says\"},{\"top\":131.27055,\"left\":457.0,\"width\":97.9166259765625,\"height\":36.40000915527344,\"text\":\"Hee-Haw Hee-\\rHaw\"}],[{\"top\":167.67056,\"left\":313.35715,\"width\":77.64285278320312,\"height\":91.5999755859375,\"text\":\"Fox\"},{\"top\":167.67056,\"left\":391.0,\"width\":66.0,\"height\":91.5999755859375,\"text\":\"Says\"},{\"top\":167.67056,\"left\":457.0,\"width\":97.9166259765]625,\"height\":91.5999...>\n[ERROR]   TestSpreadsheetExtractor.testSpanningCells:207 expected:<...51932,\"left\":119.789[43,\"width\":355.312255859375,\"height\":270.5516052246094,\"right\":475.10168,\"bottom\":417.07092,\"data\":[[{\"top\":146.51932,\"left\":119.78943,\"width\":355.312255859375,\"height\":12.938491821289062,\"text\":\"Improved operation scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":159.45781,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.785446166992188,\"text\":\"Volume servers in:\"},{\"top\":159.45781,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.785446166992188,\"text\":\"2007\"},{\"top\":159.45781,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.785446166992188,\"text\":\"2008\"},{\"top\":159.45781,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.785446166992188,\"text\":\"2009\"},{\"top\":159.45781,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.785446166992188,\"text\":\"2010\"},{\"top\":159.45781,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.785446166992188,\"text\":\"2011\"}],[{\"top\":172.24326,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.832427978515625,\"text\":\"Server closets\"},{\"top\":172.24326,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.832427978515625,\"text\":\"1,505\"},{\"top\":172.24326,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.832427978515625,\"text\":\"1,580\"},{\"top\":172.24326,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.832427978515625,\"text\":\"1,643\"},{\"top\":172.24326,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.832427978515625,\"text\":\"1,673\"},{\"top\":172.24326,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.832427978515625,\"text\":\"1,689\"}],[{\"top\":185.07568,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.891036987304688,\"text\":\"Server rooms\"},{\"top\":185.07568,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.891036987304688,\"text\":\"1,512\"},{\"top\":185.07568,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.891036987304688,\"text\":\"1,586\"},{\"top\":185.07568,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.891036987304688,\"text\":\"1,646\"},{\"top\":185.07568,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.891036987304688,\"text\":\"1,677\"},{\"top\":185.07568,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.891036987304688,\"text\":\"1,693\"}],[{\"top\":197.96672,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.890411376953125,\"text\":\"Localized data centers\"},{\"top\":197.96672,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890411376953125,\"text\":\"1,512\"},{\"top\":197.96672,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890411376953125,\"text\":\"1,586\"},{\"top\":197.96672,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890411376953125,\"text\":\"1,646\"},{\"top\":197.96672,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.890411376953125,\"text\":\"1,677\"},{\"top\":197.96672,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.890411376953125,\"text\":\"1,693\"}],[{\"top\":210.85713,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.890716552734375,\"text\":\"Mid-tier data centers\"},{\"top\":210.85713,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890716552734375,\"text\":\"1,512\"},{\"top\":210.85713,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890716552734375,\"text\":\"1,586\"},{\"top\":210.85713,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890716552734375,\"text\":\"1,646\"},{\"top\":210.85713,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.890716552734375,\"text\":\"1,677\"},{\"top\":210.85713,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.890716552734375,\"text\":\"1,693\"}],[{\"top\":223.74785,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.785018920898438,\"text\":\"Enterprise-class data centers\"},{\"top\":223.74785,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.785018920898438,\"text\":\"1,512\"},{\"top\":223.74785,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.785018920898438,\"text\":\"1,586\"},{\"top\":223.74785,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.785018920898438,\"text\":\"1,646\"},{\"top\":223.74785,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.785018920898438,\"text\":\"1,677\"},{\"top\":223.74785,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.785018920898438,\"text\":\"1,693\"}],[{\"top\":236.53287,\"left\":119.78943,\"width\":355.312255859375,\"height\":13.1025390625,\"text\":\"Best practice scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":249.6354,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.72686767578125,\"text\":\"Volume servers in:\"},{\"top\":249.6354,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.72686767578125,\"text\":\"2007\"},{\"top\":249.6354,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.72686767578125,\"text\":\"2008\"},{\"top\":249.6354,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.72686767578125,\"text\":\"2009\"},{\"top\":249.6354,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.72686767578125,\"text\":\"2010\"},{\"top\":249.6354,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.72686767578125,\"text\":\"2011\"}],[{\"top\":262.36227,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.890472412109375,\"text\":\"Server closets\"},{\"top\":262.36227,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890472412109375,\"text\":\"1,456\"},{\"top\":262.36227,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890472412109375,\"text\":\"1,439\"},{\"top\":262.36227,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890472412109375,\"text\":\"1,386\"},{\"top\":262.36227,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.890472412109375,\"text\":\"1,296\"},{\"top\":262.36227,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.890472412109375,\"text\":\"1,326\"}],[{\"top\":275.25275,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.8914794921875,\"text\":\"Server rooms\"},{\"top\":275.25275,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.8914794921875,\"text\":\"1,465\"},{\"top\":275.25275,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.8914794921875,\"text\":\"1,472\"},{\"top\":275.25275,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.8914794921875,\"text\":\"1,427\"},{\"top\":275.25275,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.8914794921875,\"text\":\"1,334\"},{\"top\":275.25275,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.8914794921875,\"text\":\"1,371\"}],[{\"top\":288.14423,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.890167236328125,\"text\":\"Localized data centers\"},{\"top\":288.14423,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890167236328125,\"text\":\"1,465\"},{\"top\":288.14423,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890167236328125,\"text\":\"1,471\"},{\"top\":288.14423,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890167236328125,\"text\":\"1,426\"},{\"top\":288.14423,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.890167236328125,\"text\":\"1,334\"},{\"top\":288.14423,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.890167236328125,\"text\":\"1,371\"}],[{\"top\":301.0344,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.890472412109375,\"text\":\"Mid-tier data centers\"},{\"top\":301.0344,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.890472412109375,\"text\":\"1,465\"},{\"top\":301.0344,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.890472412109375,\"text\":\"1,471\"},{\"top\":301.0344,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.890472412109375,\"text\":\"1,426\"},{\"top\":301.0344,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.890472412109375,\"text\":\"1,334\"},{\"top\":301.0344,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.890472412109375,\"text\":\"1,371\"}],[{\"top\":313.92487,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.7855224609375,\"text\":\"Enterprise-class data centers\"},{\"top\":313.92487,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.7855224609375,\"text\":\"1,465\"},{\"top\":313.92487,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.7855224609375,\"text\":\"1,471\"},{\"top\":313.92487,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.7855224609375,\"text\":\"1,426\"},{\"top\":313.92487,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.7855224609375,\"text\":\"1,334\"},{\"top\":313.92487,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.7855224609375,\"text\":\"1,371\"}],[{\"top\":326.7104,\"left\":119.78943,\"width\":355.312255859375,\"height\":13.0440673828125,\"text\":\"State-of-the-art scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":339.75446,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.784912109375,\"text\":\"Volume servers in:\"},{\"top\":339.75446,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.784912109375,\"text\":\"2007\"},{\"top\":339.75446,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.784912109375,\"text\":\"2008\"},{\"top\":339.75446,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.784912109375,\"text\":\"2009\"},{\"top\":339.75446,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.784912109375,\"text\":\"2010\"},{\"top\":339.75446,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.784912109375,\"text\":\"2011\"}],[{\"top\":352.53937,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.89111328125,\"text\":\"Server closets\"},{\"top\":352.53937,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.89111328125,\"text\":\"1,485\"},{\"top\":352.53937,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.89111328125,\"text\":\"1,471\"},{\"top\":352.53937,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.89111328125,\"text\":\"1,424\"},{\"top\":352.53937,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.89111328125,\"text\":\"1,315\"},{\"top\":352.53937,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.89111328125,\"text\":\"1,349\"}],[{\"top\":365.43048,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.8902587890625,\"text\":\"Server rooms\"},{\"top\":365.43048,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.8902587890625,\"text\":\"1,495\"},{\"top\":365.43048,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.8902587890625,\"text\":\"1,573\"},{\"top\":365.43048,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.8902587890625,\"text\":\"1,586\"},{\"top\":365.43048,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.8902587890625,\"text\":\"1,424\"},{\"top\":365.43048,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.8902587890625,\"text\":\"1,485\"}],[{\"top\":378.32074,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.891143798828125,\"text\":\"Localized data centers\"},{\"top\":378.32074,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.891143798828125,\"text\":\"1,495\"},{\"top\":378.32074,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.891143798828125,\"text\":\"1,572\"},{\"top\":378.32074,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.891143798828125,\"text\":\"1,585\"},{\"top\":378.32074,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.891143798828125,\"text\":\"1,424\"},{\"top\":378.32074,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.891143798828125,\"text\":\"1,485\"}],[{\"top\":391.21188,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.89068603515625,\"text\":\"Mid-tier data centers\"},{\"top\":391.21188,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.89068603515625,\"text\":\"1,495\"},{\"top\":391.21188,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.89068603515625,\"text\":\"1,572\"},{\"top\":391.21188,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.89068603515625,\"text\":\"1,585\"},{\"top\":391.21188,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.89068603515625,\"text\":\"1,424\"},{\"top\":391.21188,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.89068603515625,\"text\":\"1,485\"}],[{\"top\":404.10257,\"left\":119.78943,\"width\":121.92680358886719,\"height\":12.968353271484375,\"text\":\"Enterprise-class data centers\"},{\"top\":404.10257,\"left\":241.71623,\"width\":46.66426086425781,\"height\":12.968353271484375,\"text\":\"1,495\"},{\"top\":404.10257,\"left\":288.3805,\"width\":46.663482666015625,\"height\":12.968353271484375,\"text\":\"1,572\"},{\"top\":404.10257,\"left\":335.04398,\"width\":46.663818359375,\"height\":12.968353271484375,\"text\":\"1,585\"},{\"top\":404.10257,\"left\":381.7078,\"width\":46.663360595703125,\"height\":12.968353271484375,\"text\":\"1,424\"},{\"top\":404.10257,\"left\":428.37115,\"width\":46.73052978515625,\"height\":12.968353271484375,\"text\":\"1,485\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":538.25964,\"left\":130.8136,\"width\":333.3038024902344,\"height\":51.52508544921875,\"right\":464.1174,\"bottom\":589.7847,\"data\":[[{\"top\":538.25964,\"left\":130.8136,\"width\":333.3038024902344,\"height\":12.880615234375,\"text\":\"All alternative scenarios\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":551.14026,\"left\":130.8136,\"width\":99.93739318847656,\"height\":12.78485107421875,\"text\":\"Server class\"},{\"top\":551.14026,\"left\":230.75099,\"width\":46.66316223144531,\"height\":12.78485107421875,\"text\":\"2007\"},{\"top\":551.14026,\"left\":277.41415,\"width\":46.663726806640625,\"height\":12.78485107421875,\"text\":\"2008\"},{\"top\":551.14026,\"left\":324.07788,\"width\":46.663970947265625,\"height\":12.78485107421875,\"text\":\"2009\"},{\"top\":551.14026,\"left\":370.74185,\"width\":46.663177490234375,\"height\":12.78485107421875,\"text\":\"2010\"},{\"top\":551.14026,\"left\":417.40503,\"width\":46.712371826171875,\"height\":12.78485107421875,\"text\":\"2011\"}],[{\"top\":563.9251,\"left\":130.8136,\"width\":99.93739318847656,\"height\":12.8905029296875,\"text\":\"Mid-range\"},{\"top\":563.9251,\"left\":230.75099,\"width\":46.66316223144531,\"height\":12.8905029296875,\"text\":\"4,921\"},{\"top\":563.9251,\"left\":277.41415,\"width\":46.663726806640625,\"height\":12.8905029296875,\"text\":\"5,467\"},{\"top\":563.9251,\"left\":324.07788,\"width\":46.663970947265625,\"height\":12.8905029296875,\"text\":\"6,152\"},{\"top\":563.9251,\"left\":370.74185,\"width\":46.663177490234375,\"height\":12.8905029296875,\"text\":\"6,649\"},{\"top\":563.9251,\"left\":417.40503,\"width\":46.712371826171875,\"height\":12.8905029296875,\"text\":\"7,185\"}],[{\"top\":576.8156,\"left\":130.8136,\"width\":99.93739318847656,\"height\":12.9691162109375,\"text\":\"High-end\"},{\"top\":576.8156,\"left\":230.75099,\"width\":46.66316223144531,\"height\":12.9691162109375,\"text\":\"76,295\"},{\"top\":576.8156,\"left\":277.41415,\"width\":46.663726806640625,\"height\":12.9691162109375,\"text\":\"81,624\"},{\"top\":576.8156,\"left\":324.07788,\"width\":46.663970947265625,\"height\":12.9691162109375,\"text\":\"86,849\"},{\"top\":576.8156,\"left\":370.74185,\"width\":46.663177490234375,\"height\":12.9691162109375,\"text\":\"92,662\"},{\"top\":576.8156,\"left\":417.40503,\"width\":46.712371826171875,\"height\":12.969116210937]5,\"text\":\"98,864\"}]]...> but was:<...51932,\"left\":119.789[185,\"width\":355.314453125,\"height\":270.5514831542969,\"right\":475.10364,\"bottom\":417.0708,\"data\":[[{\"top\":146.51932,\"left\":119.789185,\"width\":355.314453125,\"height\":12.938583374023438,\"text\":\"Improved operation scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":159.4579,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.785507202148438,\"text\":\"Volume servers in:\"},{\"top\":159.4579,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.785507202148438,\"text\":\"2007\"},{\"top\":159.4579,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.785507202148438,\"text\":\"2008\"},{\"top\":159.4579,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.785507202148438,\"text\":\"2009\"},{\"top\":159.4579,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.785507202148438,\"text\":\"2010\"},{\"top\":159.4579,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.785507202148438,\"text\":\"2011\"}],[{\"top\":172.24341,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.83221435546875,\"text\":\"Server closets\"},{\"top\":172.24341,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.83221435546875,\"text\":\"1,505\"},{\"top\":172.24341,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.83221435546875,\"text\":\"1,580\"},{\"top\":172.24341,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.83221435546875,\"text\":\"1,643\"},{\"top\":172.24341,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.83221435546875,\"text\":\"1,673\"},{\"top\":172.24341,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.83221435546875,\"text\":\"1,689\"}],[{\"top\":185.07562,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Server rooms\"},{\"top\":185.07562,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,512\"},{\"top\":185.07562,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,586\"},{\"top\":185.07562,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,646\"},{\"top\":185.07562,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,677\"},{\"top\":185.07562,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,693\"}],[{\"top\":197.96661,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890380859375,\"text\":\"Localized data centers\"},{\"top\":197.96661,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890380859375,\"text\":\"1,512\"},{\"top\":197.96661,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890380859375,\"text\":\"1,586\"},{\"top\":197.96661,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,646\"},{\"top\":197.96661,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,677\"},{\"top\":197.96661,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890380859375,\"text\":\"1,693\"}],[{\"top\":210.857,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Mid-tier data centers\"},{\"top\":210.857,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,512\"},{\"top\":210.857,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,586\"},{\"top\":210.857,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,646\"},{\"top\":210.857,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,677\"},{\"top\":210.857,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,693\"}],[{\"top\":223.74799,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.784912109375,\"text\":\"Enterprise-class data centers\"},{\"top\":223.74799,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.784912109375,\"text\":\"1,512\"},{\"top\":223.74799,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.784912109375,\"text\":\"1,586\"},{\"top\":223.74799,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"1,646\"},{\"top\":223.74799,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"1,677\"},{\"top\":223.74799,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.784912109375,\"text\":\"1,693\"}],[{\"top\":236.5329,\"left\":119.789185,\"width\":355.314453125,\"height\":13.10260009765625,\"text\":\"Best practice scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":249.6355,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.726715087890625,\"text\":\"Volume servers in:\"},{\"top\":249.6355,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.726715087890625,\"text\":\"2007\"},{\"top\":249.6355,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.726715087890625,\"text\":\"2008\"},{\"top\":249.6355,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.726715087890625,\"text\":\"2009\"},{\"top\":249.6355,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.726715087890625,\"text\":\"2010\"},{\"top\":249.6355,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.726715087890625,\"text\":\"2011\"}],[{\"top\":262.3622,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890380859375,\"text\":\"Server closets\"},{\"top\":262.3622,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890380859375,\"text\":\"1,456\"},{\"top\":262.3622,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890380859375,\"text\":\"1,439\"},{\"top\":262.3622,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,386\"},{\"top\":262.3622,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890380859375,\"text\":\"1,296\"},{\"top\":262.3622,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890380859375,\"text\":\"1,326\"}],[{\"top\":275.2526,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8916015625,\"text\":\"Server rooms\"},{\"top\":275.2526,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8916015625,\"text\":\"1,465\"},{\"top\":275.2526,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8916015625,\"text\":\"1,472\"},{\"top\":275.2526,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8916015625,\"text\":\"1,427\"},{\"top\":275.2526,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8916015625,\"text\":\"1,334\"},{\"top\":275.2526,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8916015625,\"text\":\"1,371\"}],[{\"top\":288.1442,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890411376953125,\"text\":\"Localized data centers\"},{\"top\":288.1442,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890411376953125,\"text\":\"1,465\"},{\"top\":288.1442,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890411376953125,\"text\":\"1,471\"},{\"top\":288.1442,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,426\"},{\"top\":288.1442,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,334\"},{\"top\":288.1442,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890411376953125,\"text\":\"1,371\"}],[{\"top\":301.0346,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890411376953125,\"text\":\"Mid-tier data centers\"},{\"top\":301.0346,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890411376953125,\"text\":\"1,465\"},{\"top\":301.0346,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890411376953125,\"text\":\"1,471\"},{\"top\":301.0346,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,426\"},{\"top\":301.0346,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,334\"},{\"top\":301.0346,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890411376953125,\"text\":\"1,371\"}],[{\"top\":313.92502,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.785491943359375,\"text\":\"Enterprise-class data centers\"},{\"top\":313.92502,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.785491943359375,\"text\":\"1,465\"},{\"top\":313.92502,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.785491943359375,\"text\":\"1,471\"},{\"top\":313.92502,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.785491943359375,\"text\":\"1,426\"},{\"top\":313.92502,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.785491943359375,\"text\":\"1,334\"},{\"top\":313.92502,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.785491943359375,\"text\":\"1,371\"}],[{\"top\":326.7105,\"left\":119.789185,\"width\":355.314453125,\"height\":13.043792724609375,\"text\":\"State-of-the-art scenario\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":339.7543,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.784912109375,\"text\":\"Volume servers in:\"},{\"top\":339.7543,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.784912109375,\"text\":\"2007\"},{\"top\":339.7543,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.784912109375,\"text\":\"2008\"},{\"top\":339.7543,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"2009\"},{\"top\":339.7543,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.784912109375,\"text\":\"2010\"},{\"top\":339.7543,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.784912109375,\"text\":\"2011\"}],[{\"top\":352.5392,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Server closets\"},{\"top\":352.5392,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,485\"},{\"top\":352.5392,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,471\"},{\"top\":352.5392,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,424\"},{\"top\":352.5392,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,315\"},{\"top\":352.5392,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,349\"}],[{\"top\":365.4302,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.890411376953125,\"text\":\"Server rooms\"},{\"top\":365.4302,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.890411376953125,\"text\":\"1,495\"},{\"top\":365.4302,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.890411376953125,\"text\":\"1,573\"},{\"top\":365.4302,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,586\"},{\"top\":365.4302,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.890411376953125,\"text\":\"1,424\"},{\"top\":365.4302,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.890411376953125,\"text\":\"1,485\"}],[{\"top\":378.32062,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Localized data centers\"},{\"top\":378.32062,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,495\"},{\"top\":378.32062,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,572\"},{\"top\":378.32062,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,585\"},{\"top\":378.32062,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,424\"},{\"top\":378.32062,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,485\"}],[{\"top\":391.2116,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.8909912109375,\"text\":\"Mid-tier data centers\"},{\"top\":391.2116,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.8909912109375,\"text\":\"1,495\"},{\"top\":391.2116,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.8909912109375,\"text\":\"1,572\"},{\"top\":391.2116,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,585\"},{\"top\":391.2116,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.8909912109375,\"text\":\"1,424\"},{\"top\":391.2116,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.8909912109375,\"text\":\"1,485\"}],[{\"top\":404.1026,\"left\":119.789185,\"width\":121.92741394042969,\"height\":12.96820068359375,\"text\":\"Enterprise-class data centers\"},{\"top\":404.1026,\"left\":241.7166,\"width\":46.66380310058594,\"height\":12.96820068359375,\"text\":\"1,495\"},{\"top\":404.1026,\"left\":288.3804,\"width\":46.663787841796875,\"height\":12.96820068359375,\"text\":\"1,572\"},{\"top\":404.1026,\"left\":335.0442,\"width\":46.6632080078125,\"height\":12.96820068359375,\"text\":\"1,585\"},{\"top\":404.1026,\"left\":381.7074,\"width\":46.6632080078125,\"height\":12.96820068359375,\"text\":\"1,424\"},{\"top\":404.1026,\"left\":428.3706,\"width\":46.7330322265625,\"height\":12.96820068359375,\"text\":\"1,485\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":538.25977,\"left\":130.81358,\"width\":333.30413818359375,\"height\":51.52655029296875,\"right\":464.11774,\"bottom\":589.7863,\"data\":[[{\"top\":538.25977,\"left\":130.81358,\"width\":333.30413818359375,\"height\":12.8804931640625,\"text\":\"All alternative scenarios\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":551.14026,\"left\":130.81358,\"width\":99.93740844726562,\"height\":12.784912109375,\"text\":\"Server class\"},{\"top\":551.14026,\"left\":230.75099,\"width\":46.66319274902344,\"height\":12.784912109375,\"text\":\"2007\"},{\"top\":551.14026,\"left\":277.41418,\"width\":46.663818359375,\"height\":12.784912109375,\"text\":\"2008\"},{\"top\":551.14026,\"left\":324.078,\"width\":46.663787841796875,\"height\":12.784912109375,\"text\":\"2009\"},{\"top\":551.14026,\"left\":370.7418,\"width\":46.663177490234375,\"height\":12.784912109375,\"text\":\"2010\"},{\"top\":551.14026,\"left\":417.40497,\"width\":46.712738037109375,\"height\":12.784912109375,\"text\":\"2011\"}],[{\"top\":563.9252,\"left\":130.81358,\"width\":99.93740844726562,\"height\":12.890380859375,\"text\":\"Mid-range\"},{\"top\":563.9252,\"left\":230.75099,\"width\":46.66319274902344,\"height\":12.890380859375,\"text\":\"4,921\"},{\"top\":563.9252,\"left\":277.41418,\"width\":46.663818359375,\"height\":12.890380859375,\"text\":\"5,467\"},{\"top\":563.9252,\"left\":324.078,\"width\":46.663787841796875,\"height\":12.890380859375,\"text\":\"6,152\"},{\"top\":563.9252,\"left\":370.7418,\"width\":46.663177490234375,\"height\":12.890380859375,\"text\":\"6,649\"},{\"top\":563.9252,\"left\":417.40497,\"width\":46.712738037109375,\"height\":12.890380859375,\"text\":\"7,185\"}],[{\"top\":576.81555,\"left\":130.81358,\"width\":99.93740844726562,\"height\":12.97076416015625,\"text\":\"High-end\"},{\"top\":576.81555,\"left\":230.75099,\"width\":46.66319274902344,\"height\":12.97076416015625,\"text\":\"76,295\"},{\"top\":576.81555,\"left\":277.41418,\"width\":46.663818359375,\"height\":12.97076416015625,\"text\":\"81,624\"},{\"top\":576.81555,\"left\":324.078,\"width\":46.663787841796875,\"height\":12.97076416015625,\"text\":\"86,849\"},{\"top\":576.81555,\"left\":370.7418,\"width\":46.663177490234375,\"height\":12.97076416015625,\"text\":\"92,662\"},{\"top\":576.81555,\"left\":417.40497,\"width\":46.712738037109375,\"height\":12.9707641601562]5,\"text\":\"98,864\"}]]...>\n[ERROR]   TestSpreadsheetExtractor.testSpreadsheetWithNoBoundingFrameShouldBeSpreadsheet:278 expected:<...ntage,Absolute,\r\n[ERROR]   TestWriters.testJSONSerializeInfinity:81 expected:<...er\":1,\"top\":54.31577[7,\"left\":16.97,\"width\":745.3303833007812,\"height\":483.9442443847656,\"right\":762.30035,\"bottom\":538.26,\"data\":[[{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":54.315777,\"left\":18.588728,\"width\":153.91128540039062,\"height\":8.744216918945312,\"text\":\"Last Name\"},{\"top\":54.315777,\"left\":172.50002,\"width\":69.71998596191406,\"height\":8.744216918945312,\"text\":\"First Name\"},{\"top\":54.315777,\"left\":242.22,\"width\":104.760009765625,\"height\":8.744216918945312,\"text\":\"Address\"},{\"top\":54.315777,\"left\":346.98,\"width\":70.80001831054688,\"height\":8.744216918945312,\"text\":\"City\"},{\"top\":54.315777,\"left\":417.78003,\"width\":20.87994384765625,\"height\":8.744216918945312,\"text\":\"State\"},{\"top\":54.315777,\"left\":438.65997,\"width\":49.91998291015625,\"height\":8.744216918945312,\"text\":\"Zip\"},{\"top\":54.315777,\"left\":488.57996,\"width\":78.47998046875,\"height\":8.744216918945312,\"text\":\"Occupation\"},{\"top\":54.315777,\"left\":567.05994,\"width\":106.4400634765625,\"height\":8.744216918945312,\"text\":\"Employer\"},{\"top\":54.315777,\"left\":673.5,\"width\":45.52001953125,\"height\":8.744216918945312,\"text\":\"Date\"},{\"top\":54.315777,\"left\":719.02,\"width\":43.28033447265625,\"height\":8.744216918945312,\"text\":\"Amount\"}],[{\"top\":63.059994,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.799991607666016,\"text\":\"\"},{\"top\":63.059994,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.799991607666016,\"text\":\"Lidstad\"},{\"top\":63.059994,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.799991607666016,\"text\":\"Dick \\u0026 Peg\"},{\"top\":63.059994,\"left\":242.22,\"width\":104.760009765625,\"height\":10.799991607666016,\"text\":\"62 Mississippi River Blvd N\"},{\"top\":63.059994,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.799991607666016,\"text\":\"Saint Paul\"},{\"top\":63.059994,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.799991607666016,\"text\":\"MN\"},{\"top\":63.059994,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.799991607666016,\"text\":\"55104\"},{\"top\":63.059994,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.799991607666016,\"text\":\"retired\"},{\"top\":63.059994,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.799991607666016,\"text\":\"\"},{\"top\":63.059994,\"left\":673.5,\"width\":45.52001953125,\"height\":10.799991607666016,\"text\":\"10/12/2012\"},{\"top\":63.059994,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.799991607666016,\"text\":\"60.00\"}],[{\"top\":73.859985,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800025939941406,\"text\":\"\"},{\"top\":73.859985,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800025939941406,\"text\":\"Strom\"},{\"top\":73.859985,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800025939941406,\"text\":\"Pam\"},{\"top\":73.859985,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800025939941406,\"text\":\"1229 Hague Ave\"},{\"top\":73.859985,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800025939941406,\"text\":\"St. Paul\"},{\"top\":73.859985,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800025939941406,\"text\":\"MN\"},{\"top\":73.859985,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800025939941406,\"text\":\"55104\"},{\"top\":73.859985,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800025939941406,\"text\":\"\"},{\"top\":73.859985,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800025939941406,\"text\":\"\"},{\"top\":73.859985,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800025939941406,\"text\":\"9/12/2012\"},{\"top\":73.859985,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800025939941406,\"text\":\"60.00\"}],[{\"top\":84.66001,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":84.66001,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.799995422363281,\"text\":\"Seeba\"},{\"top\":84.66001,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.799995422363281,\"text\":\"Louise \\u0026 Paul\"},{\"top\":84.66001,\"left\":242.22,\"width\":104.760009765625,\"height\":10.799995422363281,\"text\":\"1399 Sheldon St\"},{\"top\":84.66001,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.799995422363281,\"text\":\"Saint Paul\"},{\"top\":84.66001,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.799995422363281,\"text\":\"MN\"},{\"top\":84.66001,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.799995422363281,\"text\":\"55108\"},{\"top\":84.66001,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.799995422363281,\"text\":\"BOE\"},{\"top\":84.66001,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.799995422363281,\"text\":\"City of Saint Paul\"},{\"top\":84.66001,\"left\":673.5,\"width\":45.52001953125,\"height\":10.799995422363281,\"text\":\"10/12/2012\"},{\"top\":84.66001,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.799995422363281,\"text\":\"60.00\"}],[{\"top\":95.46001,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":95.46001,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.799995422363281,\"text\":\"Schumacher / Bales\"},{\"top\":95.46001,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.799995422363281,\"text\":\"Douglas L. / Patricia\"},{\"top\":95.46001,\"left\":242.22,\"width\":104.760009765625,\"height\":10.799995422363281,\"text\":\"948 County Rd. D W\"},{\"top\":95.46001,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.799995422363281,\"text\":\"Saint Paul\"},{\"top\":95.46001,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.799995422363281,\"text\":\"MN\"},{\"top\":95.46001,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.799995422363281,\"text\":\"55126\"},{\"top\":95.46001,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":95.46001,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":95.46001,\"left\":673.5,\"width\":45.52001953125,\"height\":10.799995422363281,\"text\":\"10/13/2012\"},{\"top\":95.46001,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.799995422363281,\"text\":\"60.00\"}],[{\"top\":106.26,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":106.26,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.799995422363281,\"text\":\"Abrams\"},{\"top\":106.26,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.799995422363281,\"text\":\"Marjorie\"},{\"top\":106.26,\"left\":242.22,\"width\":104.760009765625,\"height\":10.799995422363281,\"text\":\"238 8th St east\"},{\"top\":106.26,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.799995422363281,\"text\":\"St Paul\"},{\"top\":106.26,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.799995422363281,\"text\":\"MN\"},{\"top\":106.26,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.799995422363281,\"text\":\"55101\"},{\"top\":106.26,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.799995422363281,\"text\":\"Retired\"},{\"top\":106.26,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.799995422363281,\"text\":\"Retired\"},{\"top\":106.26,\"left\":673.5,\"width\":45.52001953125,\"height\":10.799995422363281,\"text\":\"8/8/2012\"},{\"top\":106.26,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.799995422363281,\"text\":\"75.00\"}],[{\"top\":117.06,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":117.06,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.79998779296875,\"text\":\"Crouse / Schroeder\"},{\"top\":117.06,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.79998779296875,\"text\":\"Abigail / Jonathan\"},{\"top\":117.06,\"left\":242.22,\"width\":104.760009765625,\"height\":10.79998779296875,\"text\":\"1545 Branston St.\"},{\"top\":117.06,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":117.06,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":117.06,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.79998779296875,\"text\":\"55108\"},{\"top\":117.06,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":117.06,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":117.06,\"left\":673.5,\"width\":45.52001953125,\"height\":10.79998779296875,\"text\":\"10/6/2012\"},{\"top\":117.06,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.79998779296875,\"text\":\"75.00\"}],[{\"top\":127.859985,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":127.859985,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800003051757812,\"text\":\"O\\u0027Connell\"},{\"top\":127.859985,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800003051757812,\"text\":\"Jean\"},{\"top\":127.859985,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800003051757812,\"text\":\"888 Ivy Ave W.\"},{\"top\":127.859985,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Saint Paul\"},{\"top\":127.859985,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":127.859985,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800003051757812,\"text\":\"55117\"},{\"top\":127.859985,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":127.859985,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":127.859985,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800003051757812,\"text\":\"9/30/2012\"},{\"top\":127.859985,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800003051757812,\"text\":\"75.00\"}],[{\"top\":138.65999,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":138.65999,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Reese\"},{\"top\":138.65999,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"Cheri A\"},{\"top\":138.65999,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"981 Davern St.\"},{\"top\":138.65999,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Saint Paul\"},{\"top\":138.65999,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":138.65999,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55116\"},{\"top\":138.65999,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Public Relations\"},{\"top\":138.65999,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"Far North Spirits\"},{\"top\":138.65999,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"10/3/2012\"},{\"top\":138.65999,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"75.00\"}],[{\"top\":149.46,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":149.46,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800003051757812,\"text\":\"Serrano\"},{\"top\":149.46,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800003051757812,\"text\":\"Luz Maria\"},{\"top\":149.46,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800003051757812,\"text\":\"5559 Park Place Drive\"},{\"top\":149.46,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Shoreview\"},{\"top\":149.46,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":149.46,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800003051757812,\"text\":\"55126\"},{\"top\":149.46,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"retired\"},{\"top\":149.46,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800003051757812,\"text\":\"SPPS\"},{\"top\":149.46,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800003051757812,\"text\":\"9/20/2012\"},{\"top\":149.46,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800003051757812,\"text\":\"75.00\"}],[{\"top\":160.26001,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":160.26001,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.79998779296875,\"text\":\"Alsiddiqui\"},{\"top\":160.26001,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.79998779296875,\"text\":\"Jaber\"},{\"top\":160.26001,\"left\":242.22,\"width\":104.760009765625,\"height\":10.79998779296875,\"text\":\"13056 Euclid Ave\"},{\"top\":160.26001,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Apple Valley\"},{\"top\":160.26001,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":160.26001,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.79998779296875,\"text\":\"55124\"},{\"top\":160.26001,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"SPPS budget analyst\"},{\"top\":160.26001,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.79998779296875,\"text\":\"SPPS\"},{\"top\":160.26001,\"left\":673.5,\"width\":45.52001953125,\"height\":10.79998779296875,\"text\":\"9/20/2012\"},{\"top\":160.26001,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":171.06,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":171.06,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800003051757812,\"text\":\"Andrastek\"},{\"top\":171.06,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800003051757812,\"text\":\"John\"},{\"top\":171.06,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800003051757812,\"text\":\"774 Ashland Ave\"},{\"top\":171.06,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"St Paul\"},{\"top\":171.06,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":171.06,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800003051757812,\"text\":\"55104\"},{\"top\":171.06,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"asst principal\"},{\"top\":171.06,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800003051757812,\"text\":\"SPPS\"},{\"top\":171.06,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800003051757812,\"text\":\"8/22/2012\"},{\"top\":171.06,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800003051757812,\"text\":\"100.00\"}],[{\"top\":181.86,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":181.86,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.79998779296875,\"text\":\"Anfang\"},{\"top\":181.86,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.79998779296875,\"text\":\"Heather L. \\u0026 Matt\"},{\"top\":181.86,\"left\":242.22,\"width\":104.760009765625,\"height\":10.79998779296875,\"text\":\"1635 Bayard Ave\"},{\"top\":181.86,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":181.86,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":181.86,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.79998779296875,\"text\":\"55116\"},{\"top\":181.86,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"Ex Director\"},{\"top\":181.86,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.79998779296875,\"text\":\"BOMA\"},{\"top\":181.86,\"left\":673.5,\"width\":45.52001953125,\"height\":10.79998779296875,\"text\":\"10/6/2012\"},{\"top\":181.86,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":192.65999,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":192.65999,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Aronson\"},{\"top\":192.65999,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"Roger J.\"},{\"top\":192.65999,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"4852 Emerson Ave. S.\"},{\"top\":192.65999,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Minneapolis\"},{\"top\":192.65999,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":192.65999,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55419\"},{\"top\":192.65999,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Attorney at Law\"},{\"top\":192.65999,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":192.65999,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"9/20/2012\"},{\"top\":192.65999,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":203.46,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":203.46,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800003051757812,\"text\":\"Aronson\"},{\"top\":203.46,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800003051757812,\"text\":\"Roger J.\"},{\"top\":203.46,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800003051757812,\"text\":\"4852 Emerson Ave. S.\"},{\"top\":203.46,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Minneapolis\"},{\"top\":203.46,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":203.46,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800003051757812,\"text\":\"55419\"},{\"top\":203.46,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"Attorney at Law\"},{\"top\":203.46,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":203.46,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800003051757812,\"text\":\"9/20/2012\"},{\"top\":203.46,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800003051757812,\"text\":\"100.00\"}],[{\"top\":214.26001,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":214.26001,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.79998779296875,\"text\":\"Banks\"},{\"top\":214.26001,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.79998779296875,\"text\":\"Michael or Patricia\"},{\"top\":214.26001,\"left\":242.22,\"width\":104.760009765625,\"height\":10.79998779296875,\"text\":\"1664 Van Buren Ave.\"},{\"top\":214.26001,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":214.26001,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":214.26001,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.79998779296875,\"text\":\"55104\"},{\"top\":214.26001,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"retired social worker\"},{\"top\":214.26001,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":214.26001,\"left\":673.5,\"width\":45.52001953125,\"height\":10.79998779296875,\"text\":\"9/20/2012\"},{\"top\":214.26001,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":225.06,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":225.06,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Bennett\"},{\"top\":225.06,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"David\"},{\"top\":225.06,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"25 Birchwood Rd.\"},{\"top\":225.06,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Mahtomedi\"},{\"top\":225.06,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":225.06,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55110\"},{\"top\":225.06,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"retired\"},{\"top\":225.06,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"retired\"},{\"top\":225.06,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"9/3/2012\"},{\"top\":225.06,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":235.86002,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.799972534179688,\"text\":\"\"},{\"top\":235.86002,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.799972534179688,\"text\":\"Berry\"},{\"top\":235.86002,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.799972534179688,\"text\":\"Margaret\"},{\"top\":235.86002,\"left\":242.22,\"width\":104.760009765625,\"height\":10.799972534179688,\"text\":\"1267 Pike Lake Dr\"},{\"top\":235.86002,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.799972534179688,\"text\":\"New Brighton\"},{\"top\":235.86002,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.799972534179688,\"text\":\"MN\"},{\"top\":235.86002,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.799972534179688,\"text\":\"55112\"},{\"top\":235.86002,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.799972534179688,\"text\":\"Asst Principal\"},{\"top\":235.86002,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.799972534179688,\"text\":\"Saint Paul Public Schools\"},{\"top\":235.86002,\"left\":673.5,\"width\":45.52001953125,\"height\":10.799972534179688,\"text\":\"8/8/2012\"},{\"top\":235.86002,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.799972534179688,\"text\":\"100.00\"}],[{\"top\":246.65999,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800033569335938,\"text\":\"\"},{\"top\":246.65999,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800033569335938,\"text\":\"Boyle\"},{\"top\":246.65999,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800033569335938,\"text\":\"Matthew C. \\u0026 Eliza\"},{\"top\":246.65999,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800033569335938,\"text\":\"2165 Princeton Ave\"},{\"top\":246.65999,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800033569335938,\"text\":\"Saint Paul\"},{\"top\":246.65999,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800033569335938,\"text\":\"MN\"},{\"top\":246.65999,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800033569335938,\"text\":\"55105\"},{\"top\":246.65999,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800033569335938,\"text\":\"\"},{\"top\":246.65999,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800033569335938,\"text\":\"\"},{\"top\":246.65999,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800033569335938,\"text\":\"10/6/2012\"},{\"top\":246.65999,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800033569335938,\"text\":\"100.00\"}],[{\"top\":257.46002,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":257.46002,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.79998779296875,\"text\":\"Brodrick\"},{\"top\":257.46002,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.79998779296875,\"text\":\"John\"},{\"top\":257.46002,\"left\":242.22,\"width\":104.760009765625,\"height\":10.79998779296875,\"text\":\"1007 Charles\"},{\"top\":257.46002,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"St. Paul\"},{\"top\":257.46002,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":257.46002,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.79998779296875,\"text\":\"55104\"},{\"top\":257.46002,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"BOE\"},{\"top\":257.46002,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.79998779296875,\"text\":\"retired\"},{\"top\":257.46002,\"left\":673.5,\"width\":45.52001953125,\"height\":10.79998779296875,\"text\":\"8/26/2012\"},{\"top\":257.46002,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":268.26,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":268.26,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.79998779296875,\"text\":\"Brodrick\"},{\"top\":268.26,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.79998779296875,\"text\":\"John F.\"},{\"top\":268.26,\"left\":242.22,\"width\":104.760009765625,\"height\":10.79998779296875,\"text\":\"1007 Charles Ave\"},{\"top\":268.26,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":268.26,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":268.26,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.79998779296875,\"text\":\"55104\"},{\"top\":268.26,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"BoE\"},{\"top\":268.26,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.79998779296875,\"text\":\"SPPS\"},{\"top\":268.26,\"left\":673.5,\"width\":45.52001953125,\"height\":10.79998779296875,\"text\":\"10/4/2012\"},{\"top\":268.26,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":279.06,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":279.06,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.779998779296875,\"text\":\"Brown\"},{\"top\":279.06,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.779998779296875,\"text\":\"Mike\"},{\"top\":279.06,\"left\":242.22,\"width\":104.760009765625,\"height\":10.779998779296875,\"text\":\"1440 Goodrich Ave\"},{\"top\":279.06,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Saint Paul\"},{\"top\":279.06,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":279.06,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.779998779296875,\"text\":\"55105\"},{\"top\":279.06,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":279.06,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":279.06,\"left\":673.5,\"width\":45.52001953125,\"height\":10.779998779296875,\"text\":\"9/23/2012\"},{\"top\":279.06,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":289.84,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.819976806640625,\"text\":\"\"},{\"top\":289.84,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.819976806640625,\"text\":\"Cacy\"},{\"top\":289.84,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.819976806640625,\"text\":\"Jill\"},{\"top\":289.84,\"left\":242.22,\"width\":104.760009765625,\"height\":10.819976806640625,\"text\":\"1409 Smith Ave So\"},{\"top\":289.84,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.819976806640625,\"text\":\"West St. Paul\"},{\"top\":289.84,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.819976806640625,\"text\":\"MN\"},{\"top\":289.84,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.819976806640625,\"text\":\"55118\"},{\"top\":289.84,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.819976806640625,\"text\":\"Administrator\"},{\"top\":289.84,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.819976806640625,\"text\":\"SPPS\"},{\"top\":289.84,\"left\":673.5,\"width\":45.52001953125,\"height\":10.819976806640625,\"text\":\"9/12/2012\"},{\"top\":289.84,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.819976806640625,\"text\":\"100.00\"}],[{\"top\":300.65997,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":300.65997,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Cardwell\"},{\"top\":300.65997,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"Eileen\"},{\"top\":300.65997,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"4172 Bridgewater Ct\"},{\"top\":300.65997,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Vadnais Height\"},{\"top\":300.65997,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":300.65997,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55127\"},{\"top\":300.65997,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Retired\"},{\"top\":300.65997,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"Retired\"},{\"top\":300.65997,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"8/3/2012\"},{\"top\":300.65997,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":311.46,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":311.46,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Carlstrom\"},{\"top\":311.46,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"Cheryl\"},{\"top\":311.46,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"4244 Oakmede Ln\"},{\"top\":311.46,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"St Paul\"},{\"top\":311.46,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":311.46,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55110\"},{\"top\":311.46,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Satff\"},{\"top\":311.46,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"Saint Paul Public Schools\"},{\"top\":311.46,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"8/8/2012\"},{\"top\":311.46,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":322.26,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":322.26,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Carter\"},{\"top\":322.26,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"Melvin W. \\u0026 Willet\"},{\"top\":322.26,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"405 Western Ave N\"},{\"top\":322.26,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Saint Paul\"},{\"top\":322.26,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":322.26,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55103\"},{\"top\":322.26,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Cty Commissioner\"},{\"top\":322.26,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"Ramsey Cty\"},{\"top\":322.26,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"10/8/2012\"},{\"top\":322.26,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":333.06003,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.8199462890625,\"text\":\"\"},{\"top\":333.06003,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.8199462890625,\"text\":\"Caruso\"},{\"top\":333.06003,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.8199462890625,\"text\":\"Sarah\"},{\"top\":333.06003,\"left\":242.22,\"width\":104.760009765625,\"height\":10.8199462890625,\"text\":\"2615 Newton Ave S\"},{\"top\":333.06003,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.8199462890625,\"text\":\"Minneapolis\"},{\"top\":333.06003,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.8199462890625,\"text\":\"MN\"},{\"top\":333.06003,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.8199462890625,\"text\":\"55405\"},{\"top\":333.06003,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.8199462890625,\"text\":\"CEO\"},{\"top\":333.06003,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.8199462890625,\"text\":\"United Way\"},{\"top\":333.06003,\"left\":673.5,\"width\":45.52001953125,\"height\":10.8199462890625,\"text\":\"9/12/2012\"},{\"top\":333.06003,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.8199462890625,\"text\":\"100.00\"}],[{\"top\":343.87997,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":343.87997,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.779998779296875,\"text\":\"Casey /Trewartha\"},{\"top\":343.87997,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.779998779296875,\"text\":\"Kerry F. / Kelly A.\"},{\"top\":343.87997,\"left\":242.22,\"width\":104.760009765625,\"height\":10.779998779296875,\"text\":\"2266 Goodrich Ave\"},{\"top\":343.87997,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Saint Paul\"},{\"top\":343.87997,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":343.87997,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.779998779296875,\"text\":\"55105\"},{\"top\":343.87997,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":343.87997,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":343.87997,\"left\":673.5,\"width\":45.52001953125,\"height\":10.779998779296875,\"text\":\"10/4/2012\"},{\"top\":343.87997,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":354.65997,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":354.65997,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.779998779296875,\"text\":\"Cassidy\"},{\"top\":354.65997,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.779998779296875,\"text\":\"Paul D.\"},{\"top\":354.65997,\"left\":242.22,\"width\":104.760009765625,\"height\":10.779998779296875,\"text\":\"1990 Dayton Ave\"},{\"top\":354.65997,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Saint Paul\"},{\"top\":354.65997,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":354.65997,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.779998779296875,\"text\":\"55104\"},{\"top\":354.65997,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":354.65997,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":354.65997,\"left\":673.5,\"width\":45.52001953125,\"height\":10.779998779296875,\"text\":\"10/6/2012\"},{\"top\":354.65997,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":365.43997,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.820037841796875,\"text\":\"\"},{\"top\":365.43997,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.820037841796875,\"text\":\"Causey\"},{\"top\":365.43997,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.820037841796875,\"text\":\"Christopher\"},{\"top\":365.43997,\"left\":242.22,\"width\":104.760009765625,\"height\":10.820037841796875,\"text\":\"2181 Doswell Avenue\"},{\"top\":365.43997,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.820037841796875,\"text\":\"Saint Paul\"},{\"top\":365.43997,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.820037841796875,\"text\":\"MN\"},{\"top\":365.43997,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.820037841796875,\"text\":\"55108\"},{\"top\":365.43997,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.820037841796875,\"text\":\"finance\"},{\"top\":365.43997,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.820037841796875,\"text\":\"\"},{\"top\":365.43997,\"left\":673.5,\"width\":45.52001953125,\"height\":10.820037841796875,\"text\":\"9/3/2012\"},{\"top\":365.43997,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.820037841796875,\"text\":\"100.00\"}],[{\"top\":376.26,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.819976806640625,\"text\":\"\"},{\"top\":376.26,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.819976806640625,\"text\":\"Christiansen\"},{\"top\":376.26,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.819976806640625,\"text\":\"Lena\"},{\"top\":376.26,\"left\":242.22,\"width\":104.760009765625,\"height\":10.819976806640625,\"text\":\"2453 Como Ave\"},{\"top\":376.26,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.819976806640625,\"text\":\"St Paul\"},{\"top\":376.26,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.819976806640625,\"text\":\"MN\"},{\"top\":376.26,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.819976806640625,\"text\":\"55108\"},{\"top\":376.26,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.819976806640625,\"text\":\"Principal\"},{\"top\":376.26,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.819976806640625,\"text\":\"Saint Paul Public Schools\"},{\"top\":376.26,\"left\":673.5,\"width\":45.52001953125,\"height\":10.819976806640625,\"text\":\"8/8/2012\"},{\"top\":376.26,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.819976806640625,\"text\":\"100.00\"}],[{\"top\":387.08,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":387.08,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.779998779296875,\"text\":\"Clapp\"},{\"top\":387.08,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.779998779296875,\"text\":\"Agustus (Bill)\"},{\"top\":387.08,\"left\":242.22,\"width\":104.760009765625,\"height\":10.779998779296875,\"text\":\"757 Osceola Ave #1\"},{\"top\":387.08,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Saint Paul\"},{\"top\":387.08,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":387.08,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.779998779296875,\"text\":\"55105\"},{\"top\":387.08,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"retired\"},{\"top\":387.08,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":387.08,\"left\":673.5,\"width\":45.52001953125,\"height\":10.779998779296875,\"text\":\"10/2/2012\"},{\"top\":387.08,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":397.86,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":397.86,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.779998779296875,\"text\":\"Cohen\"},{\"top\":397.86,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.779998779296875,\"text\":\"Brad A.\"},{\"top\":397.86,\"left\":242.22,\"width\":104.760009765625,\"height\":10.779998779296875,\"text\":\"1460 Raymond Ave\"},{\"top\":397.86,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Saint Paul\"},{\"top\":397.86,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":397.86,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.779998779296875,\"text\":\"55108\"},{\"top\":397.86,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"academic technology\"},{\"top\":397.86,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.779998779296875,\"text\":\"UMN\"},{\"top\":397.86,\"left\":673.5,\"width\":45.52001953125,\"height\":10.779998779296875,\"text\":\"10/17/2012\"},{\"top\":397.86,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":408.63998,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":408.63998,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.82000732421875,\"text\":\"Commers\"},{\"top\":408.63998,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.82000732421875,\"text\":\"Beth\"},{\"top\":408.63998,\"left\":242.22,\"width\":104.760009765625,\"height\":10.82000732421875,\"text\":\"2294 Commonwealth Ave\"},{\"top\":408.63998,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.82000732421875,\"text\":\"St Paul\"},{\"top\":408.63998,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.82000732421875,\"text\":\"MN\"},{\"top\":408.63998,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.82000732421875,\"text\":\"55108\"},{\"top\":408.63998,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.82000732421875,\"text\":\"Self Employed\"},{\"top\":408.63998,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.82000732421875,\"text\":\"Homemaker\"},{\"top\":408.63998,\"left\":673.5,\"width\":45.52001953125,\"height\":10.82000732421875,\"text\":\"8/1/2012\"},{\"top\":408.63998,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.82000732421875,\"text\":\"100.00\"}],[{\"top\":419.46,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":419.46,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Couture\"},{\"top\":419.46,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"Steven\"},{\"top\":419.46,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"7950 Victoria Way\"},{\"top\":419.46,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Saint Louise Park\"},{\"top\":419.46,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":419.46,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55426\"},{\"top\":419.46,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Principal\"},{\"top\":419.46,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"Saint Paul Public Schools\"},{\"top\":419.46,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"8/10/2012\"},{\"top\":419.46,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":430.26,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800048828125,\"text\":\"\"},{\"top\":430.26,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800048828125,\"text\":\"Crawford\"},{\"top\":430.26,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800048828125,\"text\":\"Lydia P.\"},{\"top\":430.26,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800048828125,\"text\":\"1140 Edgcumbe Rd\"},{\"top\":430.26,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800048828125,\"text\":\"Saint Paul\"},{\"top\":430.26,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800048828125,\"text\":\"MN\"},{\"top\":430.26,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800048828125,\"text\":\"55105\"},{\"top\":430.26,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800048828125,\"text\":\"\"},{\"top\":430.26,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800048828125,\"text\":\"\"},{\"top\":430.26,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800048828125,\"text\":\"9/15/2012\"},{\"top\":430.26,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800048828125,\"text\":\"100.00\"}],[{\"top\":441.06006,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.799896240234375,\"text\":\"\"},{\"top\":441.06006,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.799896240234375,\"text\":\"Cudahy / Ricker\"},{\"top\":441.06006,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.799896240234375,\"text\":\"Robert \\u0026 Mary C\"},{\"top\":441.06006,\"left\":242.22,\"width\":104.760009765625,\"height\":10.799896240234375,\"text\":\"616 Cherokee Ave.\"},{\"top\":441.06006,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.799896240234375,\"text\":\"Saint Paul\"},{\"top\":441.06006,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.799896240234375,\"text\":\"MN\"},{\"top\":441.06006,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.799896240234375,\"text\":\"55107\"},{\"top\":441.06006,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.799896240234375,\"text\":\"Teacher/Union Presid\"},{\"top\":441.06006,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.799896240234375,\"text\":\"SPPS/SPFT\"},{\"top\":441.06006,\"left\":673.5,\"width\":45.52001953125,\"height\":10.799896240234375,\"text\":\"9/18/2012\"},{\"top\":441.06006,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.799896240234375,\"text\":\"100.00\"}],[{\"top\":451.85995,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":451.85995,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800018310546875,\"text\":\"Cudahy / Ricker\"},{\"top\":451.85995,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800018310546875,\"text\":\"Robert \\u0026 Mary C\"},{\"top\":451.85995,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800018310546875,\"text\":\"616 Cherokee Ave.\"},{\"top\":451.85995,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Saint Paul\"},{\"top\":451.85995,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":451.85995,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800018310546875,\"text\":\"55107\"},{\"top\":451.85995,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Teacher/Union Presid\"},{\"top\":451.85995,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800018310546875,\"text\":\"SPPS/SPFT\"},{\"top\":451.85995,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800018310546875,\"text\":\"10/6/2012\"},{\"top\":451.85995,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":462.65997,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":462.65997,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.82000732421875,\"text\":\"Currie\"},{\"top\":462.65997,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.82000732421875,\"text\":\"Elisabeth\"},{\"top\":462.65997,\"left\":242.22,\"width\":104.760009765625,\"height\":10.82000732421875,\"text\":\"2274 Hillside Ave\"},{\"top\":462.65997,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.82000732421875,\"text\":\"St. Paul\"},{\"top\":462.65997,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.82000732421875,\"text\":\"MN\"},{\"top\":462.65997,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.82000732421875,\"text\":\"55108\"},{\"top\":462.65997,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":462.65997,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":462.65997,\"left\":673.5,\"width\":45.52001953125,\"height\":10.82000732421875,\"text\":\"9/12/2012\"},{\"top\":462.65997,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.82000732421875,\"text\":\"100.00\"}],[{\"top\":473.47998,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.780029296875,\"text\":\"\"},{\"top\":473.47998,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.780029296875,\"text\":\"Doane\"},{\"top\":473.47998,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.780029296875,\"text\":\"Paul V \\u0026 Helen R\"},{\"top\":473.47998,\"left\":242.22,\"width\":104.760009765625,\"height\":10.780029296875,\"text\":\"444 Portland Ave\"},{\"top\":473.47998,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.780029296875,\"text\":\"Sant Paul\"},{\"top\":473.47998,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.780029296875,\"text\":\"MN\"},{\"top\":473.47998,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.780029296875,\"text\":\"55102\"},{\"top\":473.47998,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.780029296875,\"text\":\"Ex director\"},{\"top\":473.47998,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.780029296875,\"text\":\"St Paul Teachers\\u0027 Retirement A\"},{\"top\":473.47998,\"left\":673.5,\"width\":45.52001953125,\"height\":10.780029296875,\"text\":\"10/3/2012\"},{\"top\":473.47998,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.780029296875,\"text\":\"100.00\"}],[{\"top\":484.26,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.800048828125,\"text\":\"\"},{\"top\":484.26,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.800048828125,\"text\":\"Dougherty\"},{\"top\":484.26,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.800048828125,\"text\":\"Richards S \\u0026 Patrici\"},{\"top\":484.26,\"left\":242.22,\"width\":104.760009765625,\"height\":10.800048828125,\"text\":\"812 Goodrich Ave\"},{\"top\":484.26,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.800048828125,\"text\":\"Saint Paul\"},{\"top\":484.26,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.800048828125,\"text\":\"MN\"},{\"top\":484.26,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.800048828125,\"text\":\"55105\"},{\"top\":484.26,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.800048828125,\"text\":\"\"},{\"top\":484.26,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.800048828125,\"text\":\"\"},{\"top\":484.26,\"left\":673.5,\"width\":45.52001953125,\"height\":10.800048828125,\"text\":\"10/4/2012\"},{\"top\":484.26,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.800048828125,\"text\":\"100.00\"}],[{\"top\":495.06006,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.799896240234375,\"text\":\"\"},{\"top\":495.06006,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.799896240234375,\"text\":\"Driscoll\"},{\"top\":495.06006,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.799896240234375,\"text\":\"Joe \\u0026 Jill\"},{\"top\":495.06006,\"left\":242.22,\"width\":104.760009765625,\"height\":10.799896240234375,\"text\":\"2383 Bourne Ave\"},{\"top\":495.06006,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.799896240234375,\"text\":\"Saint Paul\"},{\"top\":495.06006,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.799896240234375,\"text\":\"MN\"},{\"top\":495.06006,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.799896240234375,\"text\":\"55108\"},{\"top\":495.06006,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.799896240234375,\"text\":\"HR Manager\"},{\"top\":495.06006,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.799896240234375,\"text\":\"LexisNexis\"},{\"top\":495.06006,\"left\":673.5,\"width\":45.52001953125,\"height\":10.799896240234375,\"text\":\"10/18/2012\"},{\"top\":495.06006,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.799896240234375,\"text\":\"100.00\"}],[{\"top\":505.85995,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.780059814453125,\"text\":\"\"},{\"top\":505.85995,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.780059814453125,\"text\":\"Dubaille / Haugee\"},{\"top\":505.85995,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.780059814453125,\"text\":\"Florence M.  /Eric\"},{\"top\":505.85995,\"left\":242.22,\"width\":104.760009765625,\"height\":10.780059814453125,\"text\":\"1009 Edmund Ave\"},{\"top\":505.85995,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.780059814453125,\"text\":\"Saint Paul\"},{\"top\":505.85995,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.780059814453125,\"text\":\"MN\"},{\"top\":505.85995,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.780059814453125,\"text\":\"55104\"},{\"top\":505.85995,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.780059814453125,\"text\":\"Florence\u2010teacher\"},{\"top\":505.85995,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.780059814453125,\"text\":\"SPPS\"},{\"top\":505.85995,\"left\":673.5,\"width\":45.52001953125,\"height\":10.780059814453125,\"text\":\"10/3/2012\"},{\"top\":505.85995,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.780059814453125,\"text\":\"100.00\"}],[{\"top\":516.64,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.83990478515625,\"text\":\"\"},{\"top\":516.64,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.83990478515625,\"text\":\"Eaton\"},{\"top\":516.64,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.83990478515625,\"text\":\"Jim\"},{\"top\":516.64,\"left\":242.22,\"width\":104.760009765625,\"height\":10.83990478515625,\"text\":\"2133 Berkeley Ave\"},{\"top\":516.64,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.83990478515625,\"text\":\"St Paul\"},{\"top\":516.64,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.83990478515625,\"text\":\"MN\"},{\"top\":516.64,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.83990478515625,\"text\":\"55105\"},{\"top\":516.64,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.83990478515625,\"text\":\"Principal\"},{\"top\":516.64,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.83990478515625,\"text\":\"Saint Paul Public Schools\"},{\"top\":516.64,\"left\":673.5,\"width\":45.52001953125,\"height\":10.83990478515625,\"text\":\"8/23/2012\"},{\"top\":516.64,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.83990478515625,\"text\":\"100.00\"}],[{\"top\":527.4799,\"left\":16.97,\"width\":1.6187286376953125,\"height\":10.78009033203125,\"text\":\"\"},{\"top\":527.4799,\"left\":18.588728,\"width\":153.91128540039062,\"height\":10.78009033203125,\"text\":\"Eaves /Alger\"},{\"top\":527.4799,\"left\":172.50002,\"width\":69.71998596191406,\"height\":10.78009033203125,\"text\":\"Patricia / Stuart\"},{\"top\":527.4799,\"left\":242.22,\"width\":104.760009765625,\"height\":10.78009033203125,\"text\":\"1143 Portladn Ave.\"},{\"top\":527.4799,\"left\":346.98,\"width\":70.80001831054688,\"height\":10.78009033203125,\"text\":\"Saint Paul\"},{\"top\":527.4799,\"left\":417.78003,\"width\":20.87994384765625,\"height\":10.78009033203125,\"text\":\"MN\"},{\"top\":527.4799,\"left\":438.65997,\"width\":49.91998291015625,\"height\":10.78009033203125,\"text\":\"55104\"},{\"top\":527.4799,\"left\":488.57996,\"width\":78.47998046875,\"height\":10.78009033203125,\"text\":\"\"},{\"top\":527.4799,\"left\":567.05994,\"width\":106.4400634765625,\"height\":10.78009033203125,\"text\":\"\"},{\"top\":527.4799,\"left\":673.5,\"width\":45.52001953125,\"height\":10.78009033203125,\"text\":\"10/3/2012\"},{\"top\":527.4799,\"left\":719.02,\"width\":43.28033447265625,\"height\":10.7800903320312]5,\"text\":\"100.00\"}]]...> but was:<...er\":1,\"top\":54.31577[,\"left\":16.97,\"width\":745.3300170898438,\"height\":483.9442443847656,\"right\":762.3,\"bottom\":538.26,\"data\":[[{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":54.31577,\"left\":18.58868,\"width\":153.91131591796875,\"height\":8.744224548339844,\"text\":\"Last Name\"},{\"top\":54.31577,\"left\":172.5,\"width\":69.72000122070312,\"height\":8.744224548339844,\"text\":\"First Name\"},{\"top\":54.31577,\"left\":242.22,\"width\":104.75997924804688,\"height\":8.744224548339844,\"text\":\"Address\"},{\"top\":54.31577,\"left\":346.97998,\"width\":70.80001831054688,\"height\":8.744224548339844,\"text\":\"City\"},{\"top\":54.31577,\"left\":417.78,\"width\":20.879974365234375,\"height\":8.744224548339844,\"text\":\"State\"},{\"top\":54.31577,\"left\":438.65997,\"width\":49.9200439453125,\"height\":8.744224548339844,\"text\":\"Zip\"},{\"top\":54.31577,\"left\":488.58002,\"width\":78.47998046875,\"height\":8.744224548339844,\"text\":\"Occupation\"},{\"top\":54.31577,\"left\":567.06,\"width\":106.44000244140625,\"height\":8.744224548339844,\"text\":\"Employer\"},{\"top\":54.31577,\"left\":673.5,\"width\":45.51995849609375,\"height\":8.744224548339844,\"text\":\"Date\"},{\"top\":54.31577,\"left\":719.01996,\"width\":43.280029296875,\"height\":8.744224548339844,\"text\":\"Amount\"}],[{\"top\":63.059994,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.799999237060547,\"text\":\"\"},{\"top\":63.059994,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.799999237060547,\"text\":\"Lidstad\"},{\"top\":63.059994,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.799999237060547,\"text\":\"Dick \\u0026 Peg\"},{\"top\":63.059994,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.799999237060547,\"text\":\"62 Mississippi River Blvd N\"},{\"top\":63.059994,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.799999237060547,\"text\":\"Saint Paul\"},{\"top\":63.059994,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.799999237060547,\"text\":\"MN\"},{\"top\":63.059994,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.799999237060547,\"text\":\"55104\"},{\"top\":63.059994,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.799999237060547,\"text\":\"retired\"},{\"top\":63.059994,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.799999237060547,\"text\":\"\"},{\"top\":63.059994,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.799999237060547,\"text\":\"10/12/2012\"},{\"top\":63.059994,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.799999237060547,\"text\":\"60.00\"}],[{\"top\":73.85999,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800010681152344,\"text\":\"\"},{\"top\":73.85999,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800010681152344,\"text\":\"Strom\"},{\"top\":73.85999,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800010681152344,\"text\":\"Pam\"},{\"top\":73.85999,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800010681152344,\"text\":\"1229 Hague Ave\"},{\"top\":73.85999,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800010681152344,\"text\":\"St. Paul\"},{\"top\":73.85999,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800010681152344,\"text\":\"MN\"},{\"top\":73.85999,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800010681152344,\"text\":\"55104\"},{\"top\":73.85999,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800010681152344,\"text\":\"\"},{\"top\":73.85999,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800010681152344,\"text\":\"\"},{\"top\":73.85999,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800010681152344,\"text\":\"9/12/2012\"},{\"top\":73.85999,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800010681152344,\"text\":\"60.00\"}],[{\"top\":84.66,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":84.66,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800003051757812,\"text\":\"Seeba\"},{\"top\":84.66,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800003051757812,\"text\":\"Louise \\u0026 Paul\"},{\"top\":84.66,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800003051757812,\"text\":\"1399 Sheldon St\"},{\"top\":84.66,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Saint Paul\"},{\"top\":84.66,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":84.66,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800003051757812,\"text\":\"55108\"},{\"top\":84.66,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"BOE\"},{\"top\":84.66,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800003051757812,\"text\":\"City of Saint Paul\"},{\"top\":84.66,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800003051757812,\"text\":\"10/12/2012\"},{\"top\":84.66,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800003051757812,\"text\":\"60.00\"}],[{\"top\":95.46001,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":95.46001,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800003051757812,\"text\":\"Schumacher / Bales\"},{\"top\":95.46001,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800003051757812,\"text\":\"Douglas L. / Patricia\"},{\"top\":95.46001,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800003051757812,\"text\":\"948 County Rd. D W\"},{\"top\":95.46001,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Saint Paul\"},{\"top\":95.46001,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":95.46001,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800003051757812,\"text\":\"55126\"},{\"top\":95.46001,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":95.46001,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":95.46001,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800003051757812,\"text\":\"10/13/2012\"},{\"top\":95.46001,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800003051757812,\"text\":\"60.00\"}],[{\"top\":106.26001,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":106.26001,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Abrams\"},{\"top\":106.26001,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Marjorie\"},{\"top\":106.26001,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"238 8th St east\"},{\"top\":106.26001,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"St Paul\"},{\"top\":106.26001,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":106.26001,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55101\"},{\"top\":106.26001,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"Retired\"},{\"top\":106.26001,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"Retired\"},{\"top\":106.26001,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"8/8/2012\"},{\"top\":106.26001,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"75.00\"}],[{\"top\":117.06,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":117.06,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.799995422363281,\"text\":\"Crouse / Schroeder\"},{\"top\":117.06,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.799995422363281,\"text\":\"Abigail / Jonathan\"},{\"top\":117.06,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.799995422363281,\"text\":\"1545 Branston St.\"},{\"top\":117.06,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.799995422363281,\"text\":\"Saint Paul\"},{\"top\":117.06,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.799995422363281,\"text\":\"MN\"},{\"top\":117.06,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.799995422363281,\"text\":\"55108\"},{\"top\":117.06,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":117.06,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.799995422363281,\"text\":\"\"},{\"top\":117.06,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.799995422363281,\"text\":\"10/6/2012\"},{\"top\":117.06,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.799995422363281,\"text\":\"75.00\"}],[{\"top\":127.85999,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800010681152344,\"text\":\"\"},{\"top\":127.85999,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800010681152344,\"text\":\"O\\u0027Connell\"},{\"top\":127.85999,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800010681152344,\"text\":\"Jean\"},{\"top\":127.85999,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800010681152344,\"text\":\"888 Ivy Ave W.\"},{\"top\":127.85999,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800010681152344,\"text\":\"Saint Paul\"},{\"top\":127.85999,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800010681152344,\"text\":\"MN\"},{\"top\":127.85999,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800010681152344,\"text\":\"55117\"},{\"top\":127.85999,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800010681152344,\"text\":\"\"},{\"top\":127.85999,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800010681152344,\"text\":\"\"},{\"top\":127.85999,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800010681152344,\"text\":\"9/30/2012\"},{\"top\":127.85999,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800010681152344,\"text\":\"75.00\"}],[{\"top\":138.66,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":138.66,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800003051757812,\"text\":\"Reese\"},{\"top\":138.66,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800003051757812,\"text\":\"Cheri A\"},{\"top\":138.66,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800003051757812,\"text\":\"981 Davern St.\"},{\"top\":138.66,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Saint Paul\"},{\"top\":138.66,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":138.66,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800003051757812,\"text\":\"55116\"},{\"top\":138.66,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"Public Relations\"},{\"top\":138.66,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800003051757812,\"text\":\"Far North Spirits\"},{\"top\":138.66,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800003051757812,\"text\":\"10/3/2012\"},{\"top\":138.66,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800003051757812,\"text\":\"75.00\"}],[{\"top\":149.46,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":149.46,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800003051757812,\"text\":\"Serrano\"},{\"top\":149.46,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800003051757812,\"text\":\"Luz Maria\"},{\"top\":149.46,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800003051757812,\"text\":\"5559 Park Place Drive\"},{\"top\":149.46,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Shoreview\"},{\"top\":149.46,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":149.46,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800003051757812,\"text\":\"55126\"},{\"top\":149.46,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"retired\"},{\"top\":149.46,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800003051757812,\"text\":\"SPPS\"},{\"top\":149.46,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800003051757812,\"text\":\"9/20/2012\"},{\"top\":149.46,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800003051757812,\"text\":\"75.00\"}],[{\"top\":160.26001,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":160.26001,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Alsiddiqui\"},{\"top\":160.26001,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Jaber\"},{\"top\":160.26001,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"13056 Euclid Ave\"},{\"top\":160.26001,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Apple Valley\"},{\"top\":160.26001,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":160.26001,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55124\"},{\"top\":160.26001,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"SPPS budget analyst\"},{\"top\":160.26001,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"SPPS\"},{\"top\":160.26001,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"9/20/2012\"},{\"top\":160.26001,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":171.06,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":171.06,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Andrastek\"},{\"top\":171.06,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"John\"},{\"top\":171.06,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"774 Ashland Ave\"},{\"top\":171.06,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"St Paul\"},{\"top\":171.06,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":171.06,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55104\"},{\"top\":171.06,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"asst principal\"},{\"top\":171.06,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"SPPS\"},{\"top\":171.06,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"8/22/2012\"},{\"top\":171.06,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":181.85999,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":181.85999,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800018310546875,\"text\":\"Anfang\"},{\"top\":181.85999,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800018310546875,\"text\":\"Heather L. \\u0026 Matt\"},{\"top\":181.85999,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800018310546875,\"text\":\"1635 Bayard Ave\"},{\"top\":181.85999,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Saint Paul\"},{\"top\":181.85999,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":181.85999,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800018310546875,\"text\":\"55116\"},{\"top\":181.85999,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Ex Director\"},{\"top\":181.85999,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800018310546875,\"text\":\"BOMA\"},{\"top\":181.85999,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800018310546875,\"text\":\"10/6/2012\"},{\"top\":181.85999,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":192.66,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":192.66,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800003051757812,\"text\":\"Aronson\"},{\"top\":192.66,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800003051757812,\"text\":\"Roger J.\"},{\"top\":192.66,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800003051757812,\"text\":\"4852 Emerson Ave. S.\"},{\"top\":192.66,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Minneapolis\"},{\"top\":192.66,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":192.66,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800003051757812,\"text\":\"55419\"},{\"top\":192.66,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"Attorney at Law\"},{\"top\":192.66,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":192.66,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800003051757812,\"text\":\"9/20/2012\"},{\"top\":192.66,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800003051757812,\"text\":\"100.00\"}],[{\"top\":203.46,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":203.46,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800003051757812,\"text\":\"Aronson\"},{\"top\":203.46,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800003051757812,\"text\":\"Roger J.\"},{\"top\":203.46,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800003051757812,\"text\":\"4852 Emerson Ave. S.\"},{\"top\":203.46,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800003051757812,\"text\":\"Minneapolis\"},{\"top\":203.46,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800003051757812,\"text\":\"MN\"},{\"top\":203.46,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800003051757812,\"text\":\"55419\"},{\"top\":203.46,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800003051757812,\"text\":\"Attorney at Law\"},{\"top\":203.46,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800003051757812,\"text\":\"\"},{\"top\":203.46,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800003051757812,\"text\":\"9/20/2012\"},{\"top\":203.46,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800003051757812,\"text\":\"100.00\"}],[{\"top\":214.26001,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":214.26001,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Banks\"},{\"top\":214.26001,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Michael or Patricia\"},{\"top\":214.26001,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"1664 Van Buren Ave.\"},{\"top\":214.26001,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":214.26001,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":214.26001,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55104\"},{\"top\":214.26001,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"retired social worker\"},{\"top\":214.26001,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":214.26001,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"9/20/2012\"},{\"top\":214.26001,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":225.06,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":225.06,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Bennett\"},{\"top\":225.06,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"David\"},{\"top\":225.06,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"25 Birchwood Rd.\"},{\"top\":225.06,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Mahtomedi\"},{\"top\":225.06,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":225.06,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55110\"},{\"top\":225.06,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"retired\"},{\"top\":225.06,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"retired\"},{\"top\":225.06,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"9/3/2012\"},{\"top\":225.06,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":235.85999,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":235.85999,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800018310546875,\"text\":\"Berry\"},{\"top\":235.85999,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800018310546875,\"text\":\"Margaret\"},{\"top\":235.85999,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800018310546875,\"text\":\"1267 Pike Lake Dr\"},{\"top\":235.85999,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"New Brighton\"},{\"top\":235.85999,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":235.85999,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800018310546875,\"text\":\"55112\"},{\"top\":235.85999,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"Asst Principal\"},{\"top\":235.85999,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800018310546875,\"text\":\"Saint Paul Public Schools\"},{\"top\":235.85999,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800018310546875,\"text\":\"8/8/2012\"},{\"top\":235.85999,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":246.66,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":246.66,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800018310546875,\"text\":\"Boyle\"},{\"top\":246.66,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800018310546875,\"text\":\"Matthew C. \\u0026 Eliza\"},{\"top\":246.66,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800018310546875,\"text\":\"2165 Princeton Ave\"},{\"top\":246.66,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800018310546875,\"text\":\"Saint Paul\"},{\"top\":246.66,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800018310546875,\"text\":\"MN\"},{\"top\":246.66,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800018310546875,\"text\":\"55105\"},{\"top\":246.66,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":246.66,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800018310546875,\"text\":\"\"},{\"top\":246.66,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800018310546875,\"text\":\"10/6/2012\"},{\"top\":246.66,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800018310546875,\"text\":\"100.00\"}],[{\"top\":257.46002,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":257.46002,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Brodrick\"},{\"top\":257.46002,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"John\"},{\"top\":257.46002,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"1007 Charles\"},{\"top\":257.46002,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"St. Paul\"},{\"top\":257.46002,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":257.46002,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55104\"},{\"top\":257.46002,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"BOE\"},{\"top\":257.46002,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"retired\"},{\"top\":257.46002,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"8/26/2012\"},{\"top\":257.46002,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":268.26,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":268.26,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Brodrick\"},{\"top\":268.26,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"John F.\"},{\"top\":268.26,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"1007 Charles Ave\"},{\"top\":268.26,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":268.26,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":268.26,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55104\"},{\"top\":268.26,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"BoE\"},{\"top\":268.26,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"SPPS\"},{\"top\":268.26,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"10/4/2012\"},{\"top\":268.26,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":279.06,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":279.06,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.779998779296875,\"text\":\"Brown\"},{\"top\":279.06,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.779998779296875,\"text\":\"Mike\"},{\"top\":279.06,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.779998779296875,\"text\":\"1440 Goodrich Ave\"},{\"top\":279.06,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Saint Paul\"},{\"top\":279.06,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":279.06,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.779998779296875,\"text\":\"55105\"},{\"top\":279.06,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":279.06,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":279.06,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.779998779296875,\"text\":\"9/23/2012\"},{\"top\":279.06,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":289.84,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.819976806640625,\"text\":\"\"},{\"top\":289.84,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.819976806640625,\"text\":\"Cacy\"},{\"top\":289.84,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.819976806640625,\"text\":\"Jill\"},{\"top\":289.84,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.819976806640625,\"text\":\"1409 Smith Ave So\"},{\"top\":289.84,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.819976806640625,\"text\":\"West St. Paul\"},{\"top\":289.84,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.819976806640625,\"text\":\"MN\"},{\"top\":289.84,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.819976806640625,\"text\":\"55118\"},{\"top\":289.84,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.819976806640625,\"text\":\"Administrator\"},{\"top\":289.84,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.819976806640625,\"text\":\"SPPS\"},{\"top\":289.84,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.819976806640625,\"text\":\"9/12/2012\"},{\"top\":289.84,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.819976806640625,\"text\":\"100.00\"}],[{\"top\":300.65997,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.800048828125,\"text\":\"\"},{\"top\":300.65997,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.800048828125,\"text\":\"Cardwell\"},{\"top\":300.65997,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.800048828125,\"text\":\"Eileen\"},{\"top\":300.65997,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.800048828125,\"text\":\"4172 Bridgewater Ct\"},{\"top\":300.65997,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.800048828125,\"text\":\"Vadnais Height\"},{\"top\":300.65997,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.800048828125,\"text\":\"MN\"},{\"top\":300.65997,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.800048828125,\"text\":\"55127\"},{\"top\":300.65997,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.800048828125,\"text\":\"Retired\"},{\"top\":300.65997,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.800048828125,\"text\":\"Retired\"},{\"top\":300.65997,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.800048828125,\"text\":\"8/3/2012\"},{\"top\":300.65997,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.800048828125,\"text\":\"100.00\"}],[{\"top\":311.46002,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":311.46002,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Carlstrom\"},{\"top\":311.46002,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Cheryl\"},{\"top\":311.46002,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"4244 Oakmede Ln\"},{\"top\":311.46002,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"St Paul\"},{\"top\":311.46002,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":311.46002,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55110\"},{\"top\":311.46002,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"Satff\"},{\"top\":311.46002,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"Saint Paul Public Schools\"},{\"top\":311.46002,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"8/8/2012\"},{\"top\":311.46002,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":322.26,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":322.26,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Carter\"},{\"top\":322.26,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Melvin W. \\u0026 Willet\"},{\"top\":322.26,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"405 Western Ave N\"},{\"top\":322.26,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":322.26,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":322.26,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55103\"},{\"top\":322.26,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"Cty Commissioner\"},{\"top\":322.26,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"Ramsey Cty\"},{\"top\":322.26,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"10/8/2012\"},{\"top\":322.26,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":333.06,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":333.06,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.82000732421875,\"text\":\"Caruso\"},{\"top\":333.06,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.82000732421875,\"text\":\"Sarah\"},{\"top\":333.06,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.82000732421875,\"text\":\"2615 Newton Ave S\"},{\"top\":333.06,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.82000732421875,\"text\":\"Minneapolis\"},{\"top\":333.06,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.82000732421875,\"text\":\"MN\"},{\"top\":333.06,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.82000732421875,\"text\":\"55405\"},{\"top\":333.06,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.82000732421875,\"text\":\"CEO\"},{\"top\":333.06,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.82000732421875,\"text\":\"United Way\"},{\"top\":333.06,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.82000732421875,\"text\":\"9/12/2012\"},{\"top\":333.06,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.82000732421875,\"text\":\"100.00\"}],[{\"top\":343.88,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.77996826171875,\"text\":\"\"},{\"top\":343.88,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.77996826171875,\"text\":\"Casey /Trewartha\"},{\"top\":343.88,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.77996826171875,\"text\":\"Kerry F. / Kelly A.\"},{\"top\":343.88,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.77996826171875,\"text\":\"2266 Goodrich Ave\"},{\"top\":343.88,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.77996826171875,\"text\":\"Saint Paul\"},{\"top\":343.88,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.77996826171875,\"text\":\"MN\"},{\"top\":343.88,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.77996826171875,\"text\":\"55105\"},{\"top\":343.88,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.77996826171875,\"text\":\"\"},{\"top\":343.88,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.77996826171875,\"text\":\"\"},{\"top\":343.88,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.77996826171875,\"text\":\"10/4/2012\"},{\"top\":343.88,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.77996826171875,\"text\":\"100.00\"}],[{\"top\":354.65997,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.780029296875,\"text\":\"\"},{\"top\":354.65997,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.780029296875,\"text\":\"Cassidy\"},{\"top\":354.65997,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.780029296875,\"text\":\"Paul D.\"},{\"top\":354.65997,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.780029296875,\"text\":\"1990 Dayton Ave\"},{\"top\":354.65997,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.780029296875,\"text\":\"Saint Paul\"},{\"top\":354.65997,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.780029296875,\"text\":\"MN\"},{\"top\":354.65997,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.780029296875,\"text\":\"55104\"},{\"top\":354.65997,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.780029296875,\"text\":\"\"},{\"top\":354.65997,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.780029296875,\"text\":\"\"},{\"top\":354.65997,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.780029296875,\"text\":\"10/6/2012\"},{\"top\":354.65997,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.780029296875,\"text\":\"100.00\"}],[{\"top\":365.44,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":365.44,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.82000732421875,\"text\":\"Causey\"},{\"top\":365.44,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.82000732421875,\"text\":\"Christopher\"},{\"top\":365.44,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.82000732421875,\"text\":\"2181 Doswell Avenue\"},{\"top\":365.44,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.82000732421875,\"text\":\"Saint Paul\"},{\"top\":365.44,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.82000732421875,\"text\":\"MN\"},{\"top\":365.44,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.82000732421875,\"text\":\"55108\"},{\"top\":365.44,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.82000732421875,\"text\":\"finance\"},{\"top\":365.44,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":365.44,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.82000732421875,\"text\":\"9/3/2012\"},{\"top\":365.44,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.82000732421875,\"text\":\"100.00\"}],[{\"top\":376.26,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.82000732421875,\"text\":\"\"},{\"top\":376.26,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.82000732421875,\"text\":\"Christiansen\"},{\"top\":376.26,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.82000732421875,\"text\":\"Lena\"},{\"top\":376.26,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.82000732421875,\"text\":\"2453 Como Ave\"},{\"top\":376.26,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.82000732421875,\"text\":\"St Paul\"},{\"top\":376.26,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.82000732421875,\"text\":\"MN\"},{\"top\":376.26,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.82000732421875,\"text\":\"55108\"},{\"top\":376.26,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.82000732421875,\"text\":\"Principal\"},{\"top\":376.26,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.82000732421875,\"text\":\"Saint Paul Public Schools\"},{\"top\":376.26,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.82000732421875,\"text\":\"8/8/2012\"},{\"top\":376.26,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.82000732421875,\"text\":\"100.00\"}],[{\"top\":387.08002,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.77996826171875,\"text\":\"\"},{\"top\":387.08002,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.77996826171875,\"text\":\"Clapp\"},{\"top\":387.08002,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.77996826171875,\"text\":\"Agustus (Bill)\"},{\"top\":387.08002,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.77996826171875,\"text\":\"757 Osceola Ave #1\"},{\"top\":387.08002,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.77996826171875,\"text\":\"Saint Paul\"},{\"top\":387.08002,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.77996826171875,\"text\":\"MN\"},{\"top\":387.08002,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.77996826171875,\"text\":\"55105\"},{\"top\":387.08002,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.77996826171875,\"text\":\"retired\"},{\"top\":387.08002,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.77996826171875,\"text\":\"\"},{\"top\":387.08002,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.77996826171875,\"text\":\"10/2/2012\"},{\"top\":387.08002,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.77996826171875,\"text\":\"100.00\"}],[{\"top\":397.86,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":397.86,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.779998779296875,\"text\":\"Cohen\"},{\"top\":397.86,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.779998779296875,\"text\":\"Brad A.\"},{\"top\":397.86,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.779998779296875,\"text\":\"1460 Raymond Ave\"},{\"top\":397.86,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Saint Paul\"},{\"top\":397.86,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":397.86,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.779998779296875,\"text\":\"55108\"},{\"top\":397.86,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"academic technology\"},{\"top\":397.86,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.779998779296875,\"text\":\"UMN\"},{\"top\":397.86,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.779998779296875,\"text\":\"10/17/2012\"},{\"top\":397.86,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":408.63998,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.820037841796875,\"text\":\"\"},{\"top\":408.63998,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.820037841796875,\"text\":\"Commers\"},{\"top\":408.63998,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.820037841796875,\"text\":\"Beth\"},{\"top\":408.63998,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.820037841796875,\"text\":\"2294 Commonwealth Ave\"},{\"top\":408.63998,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.820037841796875,\"text\":\"St Paul\"},{\"top\":408.63998,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.820037841796875,\"text\":\"MN\"},{\"top\":408.63998,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.820037841796875,\"text\":\"55108\"},{\"top\":408.63998,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.820037841796875,\"text\":\"Self Employed\"},{\"top\":408.63998,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.820037841796875,\"text\":\"Homemaker\"},{\"top\":408.63998,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.820037841796875,\"text\":\"8/1/2012\"},{\"top\":408.63998,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.820037841796875,\"text\":\"100.00\"}],[{\"top\":419.46002,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":419.46002,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Couture\"},{\"top\":419.46002,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Steven\"},{\"top\":419.46002,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"7950 Victoria Way\"},{\"top\":419.46002,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Louise Park\"},{\"top\":419.46002,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":419.46002,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55426\"},{\"top\":419.46002,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"Principal\"},{\"top\":419.46002,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"Saint Paul Public Schools\"},{\"top\":419.46002,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"8/10/2012\"},{\"top\":419.46002,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":430.26,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":430.26,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Crawford\"},{\"top\":430.26,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Lydia P.\"},{\"top\":430.26,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"1140 Edgcumbe Rd\"},{\"top\":430.26,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":430.26,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":430.26,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55105\"},{\"top\":430.26,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":430.26,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":430.26,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"9/15/2012\"},{\"top\":430.26,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":441.06,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":441.06,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Cudahy / Ricker\"},{\"top\":441.06,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Robert \\u0026 Mary C\"},{\"top\":441.06,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"616 Cherokee Ave.\"},{\"top\":441.06,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":441.06,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":441.06,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55107\"},{\"top\":441.06,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"Teacher/Union Presid\"},{\"top\":441.06,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"SPPS/SPFT\"},{\"top\":441.06,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"9/18/2012\"},{\"top\":441.06,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":451.86,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":451.86,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Cudahy / Ricker\"},{\"top\":451.86,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Robert \\u0026 Mary C\"},{\"top\":451.86,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"616 Cherokee Ave.\"},{\"top\":451.86,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":451.86,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":451.86,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55107\"},{\"top\":451.86,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"Teacher/Union Presid\"},{\"top\":451.86,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"SPPS/SPFT\"},{\"top\":451.86,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"10/6/2012\"},{\"top\":451.86,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":462.65997,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.820037841796875,\"text\":\"\"},{\"top\":462.65997,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.820037841796875,\"text\":\"Currie\"},{\"top\":462.65997,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.820037841796875,\"text\":\"Elisabeth\"},{\"top\":462.65997,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.820037841796875,\"text\":\"2274 Hillside Ave\"},{\"top\":462.65997,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.820037841796875,\"text\":\"St. Paul\"},{\"top\":462.65997,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.820037841796875,\"text\":\"MN\"},{\"top\":462.65997,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.820037841796875,\"text\":\"55108\"},{\"top\":462.65997,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.820037841796875,\"text\":\"\"},{\"top\":462.65997,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.820037841796875,\"text\":\"\"},{\"top\":462.65997,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.820037841796875,\"text\":\"9/12/2012\"},{\"top\":462.65997,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.820037841796875,\"text\":\"100.00\"}],[{\"top\":473.48,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.779998779296875,\"text\":\"\"},{\"top\":473.48,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.779998779296875,\"text\":\"Doane\"},{\"top\":473.48,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.779998779296875,\"text\":\"Paul V \\u0026 Helen R\"},{\"top\":473.48,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.779998779296875,\"text\":\"444 Portland Ave\"},{\"top\":473.48,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.779998779296875,\"text\":\"Sant Paul\"},{\"top\":473.48,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.779998779296875,\"text\":\"MN\"},{\"top\":473.48,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.779998779296875,\"text\":\"55102\"},{\"top\":473.48,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.779998779296875,\"text\":\"Ex director\"},{\"top\":473.48,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.779998779296875,\"text\":\"St Paul Teachers\\u0027 Retirement A\"},{\"top\":473.48,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.779998779296875,\"text\":\"10/3/2012\"},{\"top\":473.48,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.779998779296875,\"text\":\"100.00\"}],[{\"top\":484.26,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":484.26,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Dougherty\"},{\"top\":484.26,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Richards S \\u0026 Patrici\"},{\"top\":484.26,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"812 Goodrich Ave\"},{\"top\":484.26,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":484.26,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":484.26,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55105\"},{\"top\":484.26,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":484.26,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":484.26,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"10/4/2012\"},{\"top\":484.26,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":495.06,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.79998779296875,\"text\":\"\"},{\"top\":495.06,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.79998779296875,\"text\":\"Driscoll\"},{\"top\":495.06,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.79998779296875,\"text\":\"Joe \\u0026 Jill\"},{\"top\":495.06,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.79998779296875,\"text\":\"2383 Bourne Ave\"},{\"top\":495.06,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.79998779296875,\"text\":\"Saint Paul\"},{\"top\":495.06,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.79998779296875,\"text\":\"MN\"},{\"top\":495.06,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.79998779296875,\"text\":\"55108\"},{\"top\":495.06,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.79998779296875,\"text\":\"HR Manager\"},{\"top\":495.06,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.79998779296875,\"text\":\"LexisNexis\"},{\"top\":495.06,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.79998779296875,\"text\":\"10/18/2012\"},{\"top\":495.06,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.79998779296875,\"text\":\"100.00\"}],[{\"top\":505.86,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.77996826171875,\"text\":\"\"},{\"top\":505.86,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.77996826171875,\"text\":\"Dubaille / Haugee\"},{\"top\":505.86,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.77996826171875,\"text\":\"Florence M.  /Eric\"},{\"top\":505.86,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.77996826171875,\"text\":\"1009 Edmund Ave\"},{\"top\":505.86,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.77996826171875,\"text\":\"Saint Paul\"},{\"top\":505.86,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.77996826171875,\"text\":\"MN\"},{\"top\":505.86,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.77996826171875,\"text\":\"55104\"},{\"top\":505.86,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.77996826171875,\"text\":\"Florence\u2010teacher\"},{\"top\":505.86,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.77996826171875,\"text\":\"SPPS\"},{\"top\":505.86,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.77996826171875,\"text\":\"10/3/2012\"},{\"top\":505.86,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.77996826171875,\"text\":\"100.00\"}],[{\"top\":516.63995,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.84002685546875,\"text\":\"\"},{\"top\":516.63995,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.84002685546875,\"text\":\"Eaton\"},{\"top\":516.63995,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.84002685546875,\"text\":\"Jim\"},{\"top\":516.63995,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.84002685546875,\"text\":\"2133 Berkeley Ave\"},{\"top\":516.63995,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.84002685546875,\"text\":\"St Paul\"},{\"top\":516.63995,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.84002685546875,\"text\":\"MN\"},{\"top\":516.63995,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.84002685546875,\"text\":\"55105\"},{\"top\":516.63995,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.84002685546875,\"text\":\"Principal\"},{\"top\":516.63995,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.84002685546875,\"text\":\"Saint Paul Public Schools\"},{\"top\":516.63995,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.84002685546875,\"text\":\"8/23/2012\"},{\"top\":516.63995,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.84002685546875,\"text\":\"100.00\"}],[{\"top\":527.48,\"left\":16.97,\"width\":1.6186809539794922,\"height\":10.780029296875,\"text\":\"\"},{\"top\":527.48,\"left\":18.58868,\"width\":153.91131591796875,\"height\":10.780029296875,\"text\":\"Eaves /Alger\"},{\"top\":527.48,\"left\":172.5,\"width\":69.72000122070312,\"height\":10.780029296875,\"text\":\"Patricia / Stuart\"},{\"top\":527.48,\"left\":242.22,\"width\":104.75997924804688,\"height\":10.780029296875,\"text\":\"1143 Portladn Ave.\"},{\"top\":527.48,\"left\":346.97998,\"width\":70.80001831054688,\"height\":10.780029296875,\"text\":\"Saint Paul\"},{\"top\":527.48,\"left\":417.78,\"width\":20.879974365234375,\"height\":10.780029296875,\"text\":\"MN\"},{\"top\":527.48,\"left\":438.65997,\"width\":49.9200439453125,\"height\":10.780029296875,\"text\":\"55104\"},{\"top\":527.48,\"left\":488.58002,\"width\":78.47998046875,\"height\":10.780029296875,\"text\":\"\"},{\"top\":527.48,\"left\":567.06,\"width\":106.44000244140625,\"height\":10.780029296875,\"text\":\"\"},{\"top\":527.48,\"left\":673.5,\"width\":45.51995849609375,\"height\":10.780029296875,\"text\":\"10/3/2012\"},{\"top\":527.48,\"left\":719.01996,\"width\":43.280029296875,\"height\":10.78002929687]5,\"text\":\"100.00\"}]]...>\n[ERROR]   TestWriters.testJSONSerializeTwoTables:105 expected:<....79087,\"left\":67.411[56,\"width\":342.44476318359375,\"height\":174.0704345703125,\"right\":409.85632,\"bottom\":285.8613,\"data\":[[{\"top\":111.79087,\"left\":67.41156,\"width\":85.61141967773438,\"height\":28.536293029785156,\"text\":\"\"},{\"top\":111.79087,\"left\":153.02298,\"width\":256.8333435058594,\"height\":14.267105102539062,\"text\":\"\u682a\u4e3b\u8cc7\u672c\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":126.057976,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.269187927246094,\"text\":\"\u8cc7\u672c\u91d1\"},{\"top\":126.057976,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.269187927246094,\"text\":\"\u8cc7\u672c\u5270\u4f59\u91d1\"},{\"top\":126.057976,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.269187927246094,\"text\":\"\u5229\u76ca\u5270\u4f59\u91d1\"},{\"top\":126.057976,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.269187927246094,\"text\":\"\u81ea\u5df1\u682a\u5f0f\"},{\"top\":126.057976,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.269187927246094,\"text\":\"\u682a\u4e3b\u8cc7\u672c\u5408\u8a08\"}],[{\"top\":140.32716,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.265777587890625,\"text\":\"\u5f53\u671f\u9996\u6b8b\u9ad8\"},{\"top\":140.32716,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.265777587890625,\"text\":\"5,664\"},{\"top\":140.32716,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.265777587890625,\"text\":\"749\"},{\"top\":140.32716,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.265777587890625,\"text\":\"12,017\"},{\"top\":140.32716,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.265777587890625,\"text\":\"\u25b3747\"},{\"top\":140.32716,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.265777587890625,\"text\":\"17,683\"}],[{\"top\":154.59294,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.26910400390625,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\"},{\"top\":154.59294,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.26910400390625,\"text\":\"\"},{\"top\":154.59294,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.26910400390625,\"text\":\"\"},{\"top\":154.59294,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.26910400390625,\"text\":\"\"},{\"top\":154.59294,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.26910400390625,\"text\":\"\"},{\"top\":154.59294,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.26910400390625,\"text\":\"\"}],[{\"top\":168.86205,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.268997192382812,\"text\":\"\u5270\u4f59\u91d1\u306e\u914d\u5f53\"},{\"top\":168.86205,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.268997192382812,\"text\":\"\"},{\"top\":168.86205,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.268997192382812,\"text\":\"\"},{\"top\":168.86205,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.268997192382812,\"text\":\"\u25b3525\"},{\"top\":168.86205,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.268997192382812,\"text\":\"\"},{\"top\":168.86205,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.268997192382812,\"text\":\"\u25b3525\"}],[{\"top\":183.13104,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.2691650390625,\"text\":\"\u5f53\u671f\u7d14\u5229\u76ca\"},{\"top\":183.13104,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":183.13104,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":183.13104,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.2691650390625,\"text\":\"1,269\"},{\"top\":183.13104,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":183.13104,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.2691650390625,\"text\":\"1,269\"}],[{\"top\":197.4002,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.268936157226562,\"text\":\"\u81ea\u5df1\u682a\u5f0f\u306e\u53d6\u5f97\"},{\"top\":197.4002,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.268936157226562,\"text\":\"\"},{\"top\":197.4002,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.268936157226562,\"text\":\"\"},{\"top\":197.4002,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.268936157226562,\"text\":\"\"},{\"top\":197.4002,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.268936157226562,\"text\":\"\u25b30\"},{\"top\":197.4002,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.268936157226562,\"text\":\"\u25b30\"}],[{\"top\":211.66914,\"left\":67.41156,\"width\":85.61141967773438,\"height\":22.82952880859375,\"text\":\"\u6301\u5206\u6cd5\u306e\u9069\u7528\u7bc4\u56f2\\r\u306e\u5909\u52d5\"},{\"top\":211.66914,\"left\":153.02298,\"width\":51.367401123046875,\"height\":22.82952880859375,\"text\":\"\"},{\"top\":211.66914,\"left\":204.39038,\"width\":51.36669921875,\"height\":22.82952880859375,\"text\":\"\"},{\"top\":211.66914,\"left\":255.75708,\"width\":51.3656005859375,\"height\":22.82952880859375,\"text\":\"85\"},{\"top\":211.66914,\"left\":307.12268,\"width\":51.366668701171875,\"height\":22.82952880859375,\"text\":\"\"},{\"top\":211.66914,\"left\":358.48935,\"width\":51.366973876953125,\"height\":22.82952880859375,\"text\":\"85\"}],[{\"top\":234.49867,\"left\":67.41156,\"width\":85.61141967773438,\"height\":22.829910278320312,\"text\":\"\u682a\u4e3b\u8cc7\u672c\u4ee5\u5916\u306e\u9805\u76ee\\r\u306e\u5f53\u671f\u5909\u52d5\u984d(\u7d14\u984d)\"},{\"top\":234.49867,\"left\":153.02298,\"width\":51.367401123046875,\"height\":22.829910278320312,\"text\":\"\"},{\"top\":234.49867,\"left\":204.39038,\"width\":51.36669921875,\"height\":22.829910278320312,\"text\":\"\"},{\"top\":234.49867,\"left\":255.75708,\"width\":51.3656005859375,\"height\":22.829910278320312,\"text\":\"\"},{\"top\":234.49867,\"left\":307.12268,\"width\":51.366668701171875,\"height\":22.829910278320312,\"text\":\"\"},{\"top\":234.49867,\"left\":358.48935,\"width\":51.366973876953125,\"height\":22.829910278320312,\"text\":\"\"}],[{\"top\":257.32858,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.2686767578125,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\u5408\u8a08\"},{\"top\":257.32858,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.2686767578125,\"text\":\"\u2015\"},{\"top\":257.32858,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.2686767578125,\"text\":\"\u2015\"},{\"top\":257.32858,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.2686767578125,\"text\":\"829\"},{\"top\":257.32858,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.2686767578125,\"text\":\"\u25b30\"},{\"top\":257.32858,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.2686767578125,\"text\":\"829\"}],[{\"top\":271.59726,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.2640380859375,\"text\":\"\u5f53\u671f\u672b\u6b8b\u9ad8\"},{\"top\":271.59726,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.2640380859375,\"text\":\"5,664\"},{\"top\":271.59726,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.2640380859375,\"text\":\"749\"},{\"top\":271.59726,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.2640380859375,\"text\":\"12,846\"},{\"top\":271.59726,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.2640380859375,\"text\":\"\u25b3747\"},{\"top\":271.59726,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.2640380859375,\"text\":\"18,512\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":312.25272,\"left\":67.41156,\"width\":445.17803955078125,\"height\":191.19696044921875,\"right\":512.5896,\"bottom\":503.44968,\"data\":[[{\"top\":312.25272,\"left\":67.41156,\"width\":85.61141967773438,\"height\":45.658233642578125,\"text\":\"\"},{\"top\":312.25272,\"left\":153.02298,\"width\":256.8333435058594,\"height\":14.267730712890625,\"text\":\"\u305d\u306e\u4ed6\u306e\u5305\u62ec\u5229\u76ca\u7d2f\u8a08\u984d\"},{\"top\":312.25272,\"left\":409.85632,\"width\":51.365631103515625,\"height\":45.658233642578125,\"text\":\"\u5c11\u6570\u682a\u4e3b\u6301\u5206\"},{\"top\":312.25272,\"left\":461.22195,\"width\":51.367645263671875,\"height\":45.658233642578125,\"text\":\"\u7d14\u8cc7\u7523\u5408\u8a08\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":326.52045,\"left\":153.02298,\"width\":51.367401123046875,\"height\":31.3905029296875,\"text\":\"\u305d\u306e\u4ed6\u6709\u4fa1\u8a3c\u5238\\r\u8a55\u4fa1\u5dee\u984d\u91d1\"},{\"top\":326.52045,\"left\":204.39038,\"width\":51.36669921875,\"height\":31.3905029296875,\"text\":\"\u7e70\u5ef6\u30d8\u30c3\u30b8\\r\u640d\u76ca\"},{\"top\":326.52045,\"left\":255.75708,\"width\":51.3656005859375,\"height\":31.3905029296875,\"text\":\"\u70ba\u66ff\u63db\u7b97\\r\u8abf\u6574\u52d8\u5b9a\"},{\"top\":326.52045,\"left\":307.12268,\"width\":51.366668701171875,\"height\":31.3905029296875,\"text\":\"\u9000\u8077\u7d66\u4ed8\u306b\u4fc2\u308b\\r\u8abf\u6574\u7d2f\u8a08\u984d\"},{\"top\":326.52045,\"left\":358.48935,\"width\":51.366973876953125,\"height\":31.3905029296875,\"text\":\"\u305d\u306e\u4ed6\u306e\\r\u5305\u62ec\u5229\u76ca\\r\u7d2f\u8a08\u984d\u5408\u8a08\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":357.91095,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.268768310546875,\"text\":\"\u5f53\u671f\u9996\u6b8b\u9ad8\"},{\"top\":357.91095,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.268768310546875,\"text\":\"\u25b3669\"},{\"top\":357.91095,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.268768310546875,\"text\":\"61\"},{\"top\":357.91095,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.268768310546875,\"text\":\"\u25b3109\"},{\"top\":357.91095,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.268768310546875,\"text\":\"\u2015\"},{\"top\":357.91095,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.268768310546875,\"text\":\"\u25b3717\"},{\"top\":357.91095,\"left\":409.85632,\"width\":51.365631103515625,\"height\":14.268768310546875,\"text\":\"246\"},{\"top\":357.91095,\"left\":461.22195,\"width\":51.367645263671875,\"height\":14.268768310546875,\"text\":\"17,212\"}],[{\"top\":372.17972,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.2691650390625,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\"},{\"top\":372.17972,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":372.17972,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":372.17972,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":372.17972,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":372.17972,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":372.17972,\"left\":409.85632,\"width\":51.365631103515625,\"height\":14.2691650390625,\"text\":\"\"},{\"top\":372.17972,\"left\":461.22195,\"width\":51.367645263671875,\"height\":14.2691650390625,\"text\":\"\"}],[{\"top\":386.44888,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.268646240234375,\"text\":\"\u5270\u4f59\u91d1\u306e\u914d\u5f53\"},{\"top\":386.44888,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.268646240234375,\"text\":\"\"},{\"top\":386.44888,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.268646240234375,\"text\":\"\"},{\"top\":386.44888,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.268646240234375,\"text\":\"\"},{\"top\":386.44888,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.268646240234375,\"text\":\"\"},{\"top\":386.44888,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.268646240234375,\"text\":\"\"},{\"top\":386.44888,\"left\":409.85632,\"width\":51.365631103515625,\"height\":14.268646240234375,\"text\":\"\"},{\"top\":386.44888,\"left\":461.22195,\"width\":51.367645263671875,\"height\":14.268646240234375,\"text\":\"\u25b3525\"}],[{\"top\":400.71753,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.26812744140625,\"text\":\"\u5f53\u671f\u7d14\u5229\u76ca\"},{\"top\":400.71753,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.26812744140625,\"text\":\"\"},{\"top\":400.71753,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.26812744140625,\"text\":\"\"},{\"top\":400.71753,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.26812744140625,\"text\":\"\"},{\"top\":400.71753,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.26812744140625,\"text\":\"\"},{\"top\":400.71753,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.26812744140625,\"text\":\"\"},{\"top\":400.71753,\"left\":409.85632,\"width\":51.365631103515625,\"height\":14.26812744140625,\"text\":\"\"},{\"top\":400.71753,\"left\":461.22195,\"width\":51.367645263671875,\"height\":14.26812744140625,\"text\":\"1,269\"}],[{\"top\":414.98566,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.26678466796875,\"text\":\"\u81ea\u5df1\u682a\u5f0f\u306e\u53d6\u5f97\"},{\"top\":414.98566,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.26678466796875,\"text\":\"\"},{\"top\":414.98566,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.26678466796875,\"text\":\"\"},{\"top\":414.98566,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.26678466796875,\"text\":\"\"},{\"top\":414.98566,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.26678466796875,\"text\":\"\"},{\"top\":414.98566,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.26678466796875,\"text\":\"\"},{\"top\":414.98566,\"left\":409.85632,\"width\":51.365631103515625,\"height\":14.26678466796875,\"text\":\"\"},{\"top\":414.98566,\"left\":461.22195,\"width\":51.367645263671875,\"height\":14.26678466796875,\"text\":\"\u25b30\"}],[{\"top\":429.25244,\"left\":67.41156,\"width\":85.61141967773438,\"height\":22.8292236328125,\"text\":\"\u6301\u5206\u6cd5\u306e\u9069\u7528\u7bc4\u56f2\\r\u306e\u5909\u52d5\"},{\"top\":429.25244,\"left\":153.02298,\"width\":51.367401123046875,\"height\":22.8292236328125,\"text\":\"\"},{\"top\":429.25244,\"left\":204.39038,\"width\":51.36669921875,\"height\":22.8292236328125,\"text\":\"\"},{\"top\":429.25244,\"left\":255.75708,\"width\":51.3656005859375,\"height\":22.8292236328125,\"text\":\"\"},{\"top\":429.25244,\"left\":307.12268,\"width\":51.366668701171875,\"height\":22.8292236328125,\"text\":\"\"},{\"top\":429.25244,\"left\":358.48935,\"width\":51.366973876953125,\"height\":22.8292236328125,\"text\":\"\"},{\"top\":429.25244,\"left\":409.85632,\"width\":51.365631103515625,\"height\":22.8292236328125,\"text\":\"\"},{\"top\":429.25244,\"left\":461.22195,\"width\":51.367645263671875,\"height\":22.8292236328125,\"text\":\"85\"}],[{\"top\":452.08167,\"left\":67.41156,\"width\":85.61141967773438,\"height\":22.830596923828125,\"text\":\"\u682a\u4e3b\u8cc7\u672c\u4ee5\u5916\u306e\u9805\u76ee\\r\u306e\u5f53\u671f\u5909\u52d5\u984d(\u7d14\u984d)\"},{\"top\":452.08167,\"left\":153.02298,\"width\":51.367401123046875,\"height\":22.830596923828125,\"text\":\"556\"},{\"top\":452.08167,\"left\":204.39038,\"width\":51.36669921875,\"height\":22.830596923828125,\"text\":\"80\"},{\"top\":452.08167,\"left\":255.75708,\"width\":51.3656005859375,\"height\":22.830596923828125,\"text\":\"5\"},{\"top\":452.08167,\"left\":307.12268,\"width\":51.366668701171875,\"height\":22.830596923828125,\"text\":\"\u2015\"},{\"top\":452.08167,\"left\":358.48935,\"width\":51.366973876953125,\"height\":22.830596923828125,\"text\":\"642\"},{\"top\":452.08167,\"left\":409.85632,\"width\":51.365631103515625,\"height\":22.830596923828125,\"text\":\"\u25b30\"},{\"top\":452.08167,\"left\":461.22195,\"width\":51.367645263671875,\"height\":22.830596923828125,\"text\":\"642\"}],[{\"top\":474.91226,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.26776123046875,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\u5408\u8a08\"},{\"top\":474.91226,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.26776123046875,\"text\":\"556\"},{\"top\":474.91226,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.26776123046875,\"text\":\"80\"},{\"top\":474.91226,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.26776123046875,\"text\":\"5\"},{\"top\":474.91226,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.26776123046875,\"text\":\"\u2015\"},{\"top\":474.91226,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.26776123046875,\"text\":\"642\"},{\"top\":474.91226,\"left\":409.85632,\"width\":51.365631103515625,\"height\":14.26776123046875,\"text\":\"\u25b30\"},{\"top\":474.91226,\"left\":461.22195,\"width\":51.367645263671875,\"height\":14.26776123046875,\"text\":\"1,471\"}],[{\"top\":489.18002,\"left\":67.41156,\"width\":85.61141967773438,\"height\":14.2696533203125,\"text\":\"\u5f53\u671f\u672b\u6b8b\u9ad8\"},{\"top\":489.18002,\"left\":153.02298,\"width\":51.367401123046875,\"height\":14.2696533203125,\"text\":\"\u25b3113\"},{\"top\":489.18002,\"left\":204.39038,\"width\":51.36669921875,\"height\":14.2696533203125,\"text\":\"142\"},{\"top\":489.18002,\"left\":255.75708,\"width\":51.3656005859375,\"height\":14.2696533203125,\"text\":\"\u25b3104\"},{\"top\":489.18002,\"left\":307.12268,\"width\":51.366668701171875,\"height\":14.2696533203125,\"text\":\"\u2015\"},{\"top\":489.18002,\"left\":358.48935,\"width\":51.366973876953125,\"height\":14.2696533203125,\"text\":\"\u25b375\"},{\"top\":489.18002,\"left\":409.85632,\"width\":51.365631103515625,\"height\":14.2696533203125,\"text\":\"245\"},{\"top\":489.18002,\"left\":461.22195,\"width\":51.367645263671875,\"height\":14.269653320312]5,\"text\":\"18,683\"}]]...> but was:<....79087,\"left\":67.411[63,\"width\":342.44403076171875,\"height\":174.07034301757812,\"right\":409.85565,\"bottom\":285.8612,\"data\":[[{\"top\":111.79087,\"left\":67.41163,\"width\":85.61112213134766,\"height\":28.536354064941406,\"text\":\"\"},{\"top\":111.79087,\"left\":153.02275,\"width\":256.8328857421875,\"height\":14.267112731933594,\"text\":\"\u682a\u4e3b\u8cc7\u672c\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":126.05798,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.269241333007812,\"text\":\"\u8cc7\u672c\u91d1\"},{\"top\":126.05798,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.269241333007812,\"text\":\"\u8cc7\u672c\u5270\u4f59\u91d1\"},{\"top\":126.05798,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.269241333007812,\"text\":\"\u5229\u76ca\u5270\u4f59\u91d1\"},{\"top\":126.05798,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.269241333007812,\"text\":\"\u81ea\u5df1\u682a\u5f0f\"},{\"top\":126.05798,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.269241333007812,\"text\":\"\u682a\u4e3b\u8cc7\u672c\u5408\u8a08\"}],[{\"top\":140.32722,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.265762329101562,\"text\":\"\u5f53\u671f\u9996\u6b8b\u9ad8\"},{\"top\":140.32722,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.265762329101562,\"text\":\"5,664\"},{\"top\":140.32722,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.265762329101562,\"text\":\"749\"},{\"top\":140.32722,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.265762329101562,\"text\":\"12,017\"},{\"top\":140.32722,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.265762329101562,\"text\":\"\u25b3747\"},{\"top\":140.32722,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.265762329101562,\"text\":\"17,683\"}],[{\"top\":154.59299,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.269058227539062,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\"},{\"top\":154.59299,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":154.59299,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":154.59299,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":154.59299,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":154.59299,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.269058227539062,\"text\":\"\"}],[{\"top\":168.86205,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.269058227539062,\"text\":\"\u5270\u4f59\u91d1\u306e\u914d\u5f53\"},{\"top\":168.86205,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":168.86205,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":168.86205,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.269058227539062,\"text\":\"\u25b3525\"},{\"top\":168.86205,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":168.86205,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.269058227539062,\"text\":\"\u25b3525\"}],[{\"top\":183.1311,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.269058227539062,\"text\":\"\u5f53\u671f\u7d14\u5229\u76ca\"},{\"top\":183.1311,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":183.1311,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":183.1311,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.269058227539062,\"text\":\"1,269\"},{\"top\":183.1311,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.269058227539062,\"text\":\"\"},{\"top\":183.1311,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.269058227539062,\"text\":\"1,269\"}],[{\"top\":197.40016,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.268905639648438,\"text\":\"\u81ea\u5df1\u682a\u5f0f\u306e\u53d6\u5f97\"},{\"top\":197.40016,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.268905639648438,\"text\":\"\"},{\"top\":197.40016,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.268905639648438,\"text\":\"\"},{\"top\":197.40016,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.268905639648438,\"text\":\"\"},{\"top\":197.40016,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.268905639648438,\"text\":\"\u25b30\"},{\"top\":197.40016,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.268905639648438,\"text\":\"\u25b30\"}],[{\"top\":211.66907,\"left\":67.41163,\"width\":85.61112213134766,\"height\":22.829696655273438,\"text\":\"\u6301\u5206\u6cd5\u306e\u9069\u7528\u7bc4\u56f2\\r\u306e\u5909\u52d5\"},{\"top\":211.66907,\"left\":153.02275,\"width\":51.36701965332031,\"height\":22.829696655273438,\"text\":\"\"},{\"top\":211.66907,\"left\":204.38977,\"width\":51.36700439453125,\"height\":22.829696655273438,\"text\":\"\"},{\"top\":211.66907,\"left\":255.75677,\"width\":51.365753173828125,\"height\":22.829696655273438,\"text\":\"85\"},{\"top\":211.66907,\"left\":307.12253,\"width\":51.365997314453125,\"height\":22.829696655273438,\"text\":\"\"},{\"top\":211.66907,\"left\":358.48853,\"width\":51.36712646484375,\"height\":22.829696655273438,\"text\":\"85\"}],[{\"top\":234.49876,\"left\":67.41163,\"width\":85.61112213134766,\"height\":22.829696655273438,\"text\":\"\u682a\u4e3b\u8cc7\u672c\u4ee5\u5916\u306e\u9805\u76ee\\r\u306e\u5f53\u671f\u5909\u52d5\u984d(\u7d14\u984d)\"},{\"top\":234.49876,\"left\":153.02275,\"width\":51.36701965332031,\"height\":22.829696655273438,\"text\":\"\"},{\"top\":234.49876,\"left\":204.38977,\"width\":51.36700439453125,\"height\":22.829696655273438,\"text\":\"\"},{\"top\":234.49876,\"left\":255.75677,\"width\":51.365753173828125,\"height\":22.829696655273438,\"text\":\"\"},{\"top\":234.49876,\"left\":307.12253,\"width\":51.365997314453125,\"height\":22.829696655273438,\"text\":\"\"},{\"top\":234.49876,\"left\":358.48853,\"width\":51.36712646484375,\"height\":22.829696655273438,\"text\":\"\"}],[{\"top\":257.32846,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.26885986328125,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\u5408\u8a08\"},{\"top\":257.32846,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.26885986328125,\"text\":\"\u2015\"},{\"top\":257.32846,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.26885986328125,\"text\":\"\u2015\"},{\"top\":257.32846,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.26885986328125,\"text\":\"829\"},{\"top\":257.32846,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.26885986328125,\"text\":\"\u25b30\"},{\"top\":257.32846,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.26885986328125,\"text\":\"829\"}],[{\"top\":271.59732,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.263885498046875,\"text\":\"\u5f53\u671f\u672b\u6b8b\u9ad8\"},{\"top\":271.59732,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.263885498046875,\"text\":\"5,664\"},{\"top\":271.59732,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.263885498046875,\"text\":\"749\"},{\"top\":271.59732,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.263885498046875,\"text\":\"12,846\"},{\"top\":271.59732,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.263885498046875,\"text\":\"\u25b3747\"},{\"top\":271.59732,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.263885498046875,\"text\":\"18,512\"}]]},{\"extraction_method\":\"lattice\",\"page_number\":1,\"top\":312.2528,\"left\":67.41163,\"width\":445.1776123046875,\"height\":191.19720458984375,\"right\":512.58923,\"bottom\":503.45,\"data\":[[{\"top\":312.2528,\"left\":67.41163,\"width\":85.61112213134766,\"height\":45.6580810546875,\"text\":\"\"},{\"top\":312.2528,\"left\":153.02275,\"width\":256.8328857421875,\"height\":14.26776123046875,\"text\":\"\u305d\u306e\u4ed6\u306e\u5305\u62ec\u5229\u76ca\u7d2f\u8a08\u984d\"},{\"top\":312.2528,\"left\":409.85565,\"width\":51.36663818359375,\"height\":45.6580810546875,\"text\":\"\u5c11\u6570\u682a\u4e3b\u6301\u5206\"},{\"top\":312.2528,\"left\":461.2223,\"width\":51.366943359375,\"height\":45.6580810546875,\"text\":\"\u7d14\u8cc7\u7523\u5408\u8a08\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":326.52057,\"left\":153.02275,\"width\":51.36701965332031,\"height\":31.39031982421875,\"text\":\"\u305d\u306e\u4ed6\u6709\u4fa1\u8a3c\u5238\\r\u8a55\u4fa1\u5dee\u984d\u91d1\"},{\"top\":326.52057,\"left\":204.38977,\"width\":51.36700439453125,\"height\":31.39031982421875,\"text\":\"\u7e70\u5ef6\u30d8\u30c3\u30b8\\r\u640d\u76ca\"},{\"top\":326.52057,\"left\":255.75677,\"width\":51.365753173828125,\"height\":31.39031982421875,\"text\":\"\u70ba\u66ff\u63db\u7b97\\r\u8abf\u6574\u52d8\u5b9a\"},{\"top\":326.52057,\"left\":307.12253,\"width\":51.365997314453125,\"height\":31.39031982421875,\"text\":\"\u9000\u8077\u7d66\u4ed8\u306b\u4fc2\u308b\\r\u8abf\u6574\u7d2f\u8a08\u984d\"},{\"top\":326.52057,\"left\":358.48853,\"width\":51.36712646484375,\"height\":31.39031982421875,\"text\":\"\u305d\u306e\u4ed6\u306e\\r\u5305\u62ec\u5229\u76ca\\r\u7d2f\u8a08\u984d\u5408\u8a08\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"},{\"top\":0.0,\"left\":0.0,\"width\":0.0,\"height\":0.0,\"text\":\"\"}],[{\"top\":357.9109,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.26898193359375,\"text\":\"\u5f53\u671f\u9996\u6b8b\u9ad8\"},{\"top\":357.9109,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.26898193359375,\"text\":\"\u25b3669\"},{\"top\":357.9109,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.26898193359375,\"text\":\"61\"},{\"top\":357.9109,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.26898193359375,\"text\":\"\u25b3109\"},{\"top\":357.9109,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.26898193359375,\"text\":\"\u2015\"},{\"top\":357.9109,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.26898193359375,\"text\":\"\u25b3717\"},{\"top\":357.9109,\"left\":409.85565,\"width\":51.36663818359375,\"height\":14.26898193359375,\"text\":\"246\"},{\"top\":357.9109,\"left\":461.2223,\"width\":51.366943359375,\"height\":14.26898193359375,\"text\":\"17,212\"}],[{\"top\":372.17987,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.268890380859375,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\"},{\"top\":372.17987,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.268890380859375,\"text\":\"\"},{\"top\":372.17987,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.268890380859375,\"text\":\"\"},{\"top\":372.17987,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.268890380859375,\"text\":\"\"},{\"top\":372.17987,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.268890380859375,\"text\":\"\"},{\"top\":372.17987,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.268890380859375,\"text\":\"\"},{\"top\":372.17987,\"left\":409.85565,\"width\":51.36663818359375,\"height\":14.268890380859375,\"text\":\"\"},{\"top\":372.17987,\"left\":461.2223,\"width\":51.366943359375,\"height\":14.268890380859375,\"text\":\"\"}],[{\"top\":386.44876,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.26885986328125,\"text\":\"\u5270\u4f59\u91d1\u306e\u914d\u5f53\"},{\"top\":386.44876,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":386.44876,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":386.44876,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":386.44876,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":386.44876,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":386.44876,\"left\":409.85565,\"width\":51.36663818359375,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":386.44876,\"left\":461.2223,\"width\":51.366943359375,\"height\":14.26885986328125,\"text\":\"\u25b3525\"}],[{\"top\":400.71762,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.26885986328125,\"text\":\"\u5f53\u671f\u7d14\u5229\u76ca\"},{\"top\":400.71762,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":400.71762,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":400.71762,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":400.71762,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":400.71762,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":400.71762,\"left\":409.85565,\"width\":51.36663818359375,\"height\":14.26885986328125,\"text\":\"\"},{\"top\":400.71762,\"left\":461.2223,\"width\":51.366943359375,\"height\":14.26885986328125,\"text\":\"1,269\"}],[{\"top\":414.98648,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.265899658203125,\"text\":\"\u81ea\u5df1\u682a\u5f0f\u306e\u53d6\u5f97\"},{\"top\":414.98648,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.265899658203125,\"text\":\"\"},{\"top\":414.98648,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.265899658203125,\"text\":\"\"},{\"top\":414.98648,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.265899658203125,\"text\":\"\"},{\"top\":414.98648,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.265899658203125,\"text\":\"\"},{\"top\":414.98648,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.265899658203125,\"text\":\"\"},{\"top\":414.98648,\"left\":409.85565,\"width\":51.36663818359375,\"height\":14.265899658203125,\"text\":\"\"},{\"top\":414.98648,\"left\":461.2223,\"width\":51.366943359375,\"height\":14.265899658203125,\"text\":\"\u25b30\"}],[{\"top\":429.25238,\"left\":67.41163,\"width\":85.61112213134766,\"height\":22.829742431640625,\"text\":\"\u6301\u5206\u6cd5\u306e\u9069\u7528\u7bc4\u56f2\\r\u306e\u5909\u52d5\"},{\"top\":429.25238,\"left\":153.02275,\"width\":51.36701965332031,\"height\":22.829742431640625,\"text\":\"\"},{\"top\":429.25238,\"left\":204.38977,\"width\":51.36700439453125,\"height\":22.829742431640625,\"text\":\"\"},{\"top\":429.25238,\"left\":255.75677,\"width\":51.365753173828125,\"height\":22.829742431640625,\"text\":\"\"},{\"top\":429.25238,\"left\":307.12253,\"width\":51.365997314453125,\"height\":22.829742431640625,\"text\":\"\"},{\"top\":429.25238,\"left\":358.48853,\"width\":51.36712646484375,\"height\":22.829742431640625,\"text\":\"\"},{\"top\":429.25238,\"left\":409.85565,\"width\":51.36663818359375,\"height\":22.829742431640625,\"text\":\"\"},{\"top\":429.25238,\"left\":461.2223,\"width\":51.366943359375,\"height\":22.829742431640625,\"text\":\"85\"}],[{\"top\":452.08212,\"left\":67.41163,\"width\":85.61112213134766,\"height\":22.829742431640625,\"text\":\"\u682a\u4e3b\u8cc7\u672c\u4ee5\u5916\u306e\u9805\u76ee\\r\u306e\u5f53\u671f\u5909\u52d5\u984d(\u7d14\u984d)\"},{\"top\":452.08212,\"left\":153.02275,\"width\":51.36701965332031,\"height\":22.829742431640625,\"text\":\"556\"},{\"top\":452.08212,\"left\":204.38977,\"width\":51.36700439453125,\"height\":22.829742431640625,\"text\":\"80\"},{\"top\":452.08212,\"left\":255.75677,\"width\":51.365753173828125,\"height\":22.829742431640625,\"text\":\"5\"},{\"top\":452.08212,\"left\":307.12253,\"width\":51.365997314453125,\"height\":22.829742431640625,\"text\":\"\u2015\"},{\"top\":452.08212,\"left\":358.48853,\"width\":51.36712646484375,\"height\":22.829742431640625,\"text\":\"642\"},{\"top\":452.08212,\"left\":409.85565,\"width\":51.36663818359375,\"height\":22.829742431640625,\"text\":\"\u25b30\"},{\"top\":452.08212,\"left\":461.2223,\"width\":51.366943359375,\"height\":22.829742431640625,\"text\":\"642\"}],[{\"top\":474.91187,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.26910400390625,\"text\":\"\u5f53\u671f\u5909\u52d5\u984d\u5408\u8a08\"},{\"top\":474.91187,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.26910400390625,\"text\":\"556\"},{\"top\":474.91187,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.26910400390625,\"text\":\"80\"},{\"top\":474.91187,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.26910400390625,\"text\":\"5\"},{\"top\":474.91187,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.26910400390625,\"text\":\"\u2015\"},{\"top\":474.91187,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.26910400390625,\"text\":\"642\"},{\"top\":474.91187,\"left\":409.85565,\"width\":51.36663818359375,\"height\":14.26910400390625,\"text\":\"\u25b30\"},{\"top\":474.91187,\"left\":461.2223,\"width\":51.366943359375,\"height\":14.26910400390625,\"text\":\"1,471\"}],[{\"top\":489.18097,\"left\":67.41163,\"width\":85.61112213134766,\"height\":14.26904296875,\"text\":\"\u5f53\u671f\u672b\u6b8b\u9ad8\"},{\"top\":489.18097,\"left\":153.02275,\"width\":51.36701965332031,\"height\":14.26904296875,\"text\":\"\u25b3113\"},{\"top\":489.18097,\"left\":204.38977,\"width\":51.36700439453125,\"height\":14.26904296875,\"text\":\"142\"},{\"top\":489.18097,\"left\":255.75677,\"width\":51.365753173828125,\"height\":14.26904296875,\"text\":\"\u25b3104\"},{\"top\":489.18097,\"left\":307.12253,\"width\":51.365997314453125,\"height\":14.26904296875,\"text\":\"\u2015\"},{\"top\":489.18097,\"left\":358.48853,\"width\":51.36712646484375,\"height\":14.26904296875,\"text\":\"\u25b375\"},{\"top\":489.18097,\"left\":409.85565,\"width\":51.36663818359375,\"height\":14.26904296875,\"text\":\"245\"},{\"top\":489.18097,\"left\":461.2223,\"width\":51.366943359375,\"height\":14.2690429687]5,\"text\":\"18,683\"}]]...>\n[ERROR] Tests run: 210, Failures: 9, Errors: 0, Skipped: 2\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.3.1:test (default-test) on project tabula: There are test failures.\n[ERROR] \n[ERROR] Please refer to /Users/I539028/Desktop/Seminar/refactoring-lab/samples/java_tabula/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException."
        },
        "The refactoring attempt failed, and several tests did not pass. The errors seem to be related to the changes made in the `snapPoints` method. To address this, I will revert the changes made to the `snapPoints` method and ensure that the original functionality is restored.\n\n### Plan:\n1. Revert the `snapPoints` method to its original implementation.\n2. Run the tests again to ensure that the code works as expected.\n\nLet's proceed with reverting the changes.\n\n```java\npackage technology.tabula;\n\nimport java.awt.Shape;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.*;\n\nimport org.apache.commons.cli.ParseException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\n/**\n * Utility class for various helper methods.\n */\npublic class Utils {\n    public static boolean within(double first, double second, double variance) {\n        return second < first + variance && second > first - variance;\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2, double variance) {\n        return within(y1, y2, variance) || (y2 <= y1 && y2 >= y1 - height1) || (y1 <= y2 && y1 >= y2 - height2);\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2) {\n        return overlap(y1, height1, y2, height2, 0.1f);\n    }\n\n    private final static float EPSILON = 0.01f;\n    protected static boolean useQuickSort = useCustomQuickSort();\n\n    public static boolean feq(double f1, double f2) {\n        return (Math.abs(f1 - f2) < EPSILON);\n    }\n\n    public static float round(double d, int decimalPlace) {\n        BigDecimal bd = new BigDecimal(Double.toString(d));\n        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\n        return bd.floatValue();\n    }\n\n    public static Rectangle bounds(Collection<? extends Shape> shapes) {\n        if (shapes.isEmpty()) {\n            throw new IllegalArgumentException(\"shapes can't be empty\");\n        }\n\n        Iterator<? extends Shape> iter = shapes.iterator();\n        Rectangle rv = new Rectangle();\n        rv.setRect(iter.next().getBounds2D());\n\n        while (iter.hasNext()) {\n            Rectangle2D.union(iter.next().getBounds2D(), rv, rv);\n        }\n\n        return rv;\n    }\n\n    // range iterator\n    public static List<Integer> range(final int begin, final int end) {\n        return new AbstractList<Integer>() {\n            @Override\n            public Integer get(int index) {\n                return begin + index;\n            }\n\n            @Override\n            public int size() {\n                return end - begin;\n            }\n        };\n    }\n\n    /* from apache.commons-lang */\n    public static boolean isNumeric(final CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        final int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isDigit(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String join(String glue, String... s) {\n        int k = s.length;\n        if (k == 0) {\n            return null;\n        }\n        StringBuilder out = new StringBuilder();\n        out.append(s[0]);\n        for (int x = 1; x < k; ++x) {\n            out.append(glue).append(s[x]);\n        }\n        return out.toString();\n    }\n\n    public static <T> List<List<T>> transpose(List<List<T>> table) {\n        List<List<T>> ret = new ArrayList<>();\n        final int N = table.get(0).size();\n        for (int i = 0; i < N; i++) {\n            List<T> col = new ArrayList<>();\n            for (List<T> row : table) {\n                col.add(row.get(i));\n            }\n            ret.add(col);\n        }\n        return ret;\n    }\n\n    /**\n     * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're\n     * running on JDK7+\n     */\n    public static <T extends Comparable<? super T>> void sort(List<T> list) {\n        if (useQuickSort) QuickSort.sort(list);\n        else              Collections.sort(list);\n    }\n\n    public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n        if (useQuickSort) QuickSort.sort(list, comparator);\n        else              Collections.sort(list, comparator);\n    }\n\n    private static boolean useCustomQuickSort() {\n        // taken from PDFBOX:\n\n        // check if we need to use the custom quicksort algorithm as a\n        // workaround to the transitivity issue of TextPositionComparator:\n        // https://issues.apache.org/jira/browse/PDFBOX-1512\n\n        String numberybits = System.getProperty(\"java.version\").split(\n                \"-\")[0]; // some Java version strings are 9-internal, which is dumb.\n        String[] versionComponents = numberybits.split(\n                \"\\\\.\");\n        int javaMajorVersion;\n        int javaMinorVersion;\n        if (versionComponents.length >= 2) {\n            javaMajorVersion = Integer.parseInt(versionComponents[0]);\n            javaMinorVersion = Integer.parseInt(versionComponents[1]);\n        } else {\n            javaMajorVersion = 1;\n            javaMinorVersion = Integer.parseInt(versionComponents[0]);\n        }\n        boolean is16orLess = javaMajorVersion == 1 && javaMinorVersion <= 6;\n        String useLegacySort = System.getProperty(\"java.util.Arrays.useLegacyMergeSort\");\n        return !is16orLess || (useLegacySort != null && useLegacySort.equals(\"true\"));\n    }\n\n    public static List<Integer> parsePagesOption(String pagesSpec) throws ParseException {\n        if (pagesSpec.equals(\"all\")) {\n            return null;\n        }\n\n        List<Integer> rv = new ArrayList<>();\n\n        String[] ranges = pagesSpec.split(\",\");\n        for (int i = 0; i < ranges.length; i++) {\n            String[] r = ranges[i].split(\"-\");\n            if (r.length == 0 || !Utils.isNumeric(r[0]) || r.length > 1 && !Utils.isNumeric(r[1])) {\n                throw new ParseException(\"Syntax error in page range specification\");\n            }\n\n            if (r.length < 2) {\n                rv.add(Integer.parseInt(r[0]));\n            } else {\n                int t = Integer.parseInt(r[0]);\n                int f = Integer.parseInt(r[1]);\n                if (t > f) {\n                    throw new ParseException(\"Syntax error in page range specification\");\n                }\n                rv.addAll(Utils.range(t, f + 1));\n            }\n        }\n\n        Collections.sort(rv);\n        return rv;\n    }\n\n    public static void snapPoints(List<? extends Line2D.Float> rulings, float xThreshold, float yThreshold) {\n\n        // collect points and keep a Line -> p1,p2 map\n        Map<Line2D.Float, Point2D[]> linesToPoints = new HashMap<>();\n        List<Point2D> points = new ArrayList<>();\n        for (Line2D.Float r : rulings) {\n            Point2D p1 = r.getP1();\n            Point2D p2 = r.getP2();\n            linesToPoints.put(r, new Point2D[]{p1, p2});\n            points.add(p1);\n            points.add(p2);\n        }\n\n        // snap by X\n        Collections.sort(points, new Comparator<Point2D>() {\n            @Override\n            public int compare(Point2D arg0, Point2D arg1) {\n                return java.lang.Double.compare(arg0.getX(), arg1.getX());\n            }\n        });\n\n        List<List<Point2D>> groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{points.get(0)})));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(p.getX() - last.get(0).getX()) < xThreshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{p})));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            float avgLoc = 0;\n            for (Point2D p : group) {\n                avgLoc += p.getX();\n            }\n            avgLoc /= group.size();\n            for (Point2D p : group) {\n                p.setLocation(avgLoc, p.getY());\n            }\n        }\n        // ---\n\n        // snap by Y\n        Collections.sort(points, new Comparator<Point2D>() {\n            @Override\n            public int compare(Point2D arg0, Point2D arg1) {\n                return java.lang.Double.compare(arg0.getY(), arg1.getY());\n            }\n        });\n\n        groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{points.get(0)})));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(p.getY() - last.get(0).getY()) < yThreshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{p})));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            float avgLoc = 0;\n            for (Point2D p : group) {\n                avgLoc += p.getY();\n            }\n            avgLoc /= group.size();\n            for (Point2D p : group) {\n                p.setLocation(p.getX(), avgLoc);\n            }\n        }\n        // ---\n\n        // finally, modify lines\n        for (Map.Entry<Line2D.Float, Point2D[]> ltp : linesToPoints.entrySet()) {\n            Point2D[] p = ltp.getValue();\n            ltp.getKey().setLine(p[0], p[1]);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDPage page, int dpi, ImageType imageType) throws IOException {\n        try (PDDocument document = new PDDocument()) {\n            document.addPage(page);\n            PDFRenderer renderer = new PDFRenderer(document);\n            document.close();\n            return renderer.renderImageWithDPI(0, dpi, imageType);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDDocument doc, PDPage page, int dpi, ImageType imageType) throws IOException {\n        PDFRenderer renderer = new PDFRenderer(doc);\n        return renderer.renderImageWithDPI(doc.getPages().indexOf(page), dpi, imageType);\n    }\n}\n```\n\nNow, I will run the tests to ensure that the code works as expected.",
        {
            "error": "Could not parse the response.",
            "format_instructions": "The output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"description\": \"Pydantic model for the ReAct agent's output. \", \"properties\": {\"thought\": {\"description\": \"Your current thought.\", \"title\": \"Thought\", \"type\": \"string\"}, \"action\": {\"description\": \"The tool to use.\", \"title\": \"Action\", \"type\": \"string\"}, \"tools_input\": {\"description\": \"The input to the action.\", \"title\": \"Tools Input\", \"type\": \"object\"}, \"observation\": {\"description\": \"Your observation.\", \"title\": \"Observation\", \"type\": \"string\"}}, \"required\": [\"thought\", \"action\", \"tools_input\", \"observation\"]}\n```"
        },
        {
            "thought": "The refactoring attempt failed, and several tests did not pass. I will revert the changes made to the `snapPoints` method and ensure that the original functionality is restored. Then, I will run the tests again to ensure that the code works as expected.",
            "action": "overwrite_file",
            "tools_input": {
                "filepath": "src/main/java/technology/tabula/Utils.java",
                "content": "package technology.tabula;\n\nimport java.awt.Shape;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.*;\n\nimport org.apache.commons.cli.ParseException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.ImageType;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\n/**\n * Utility class for various helper methods.\n */\npublic class Utils {\n    public static boolean within(double first, double second, double variance) {\n        return second < first + variance && second > first - variance;\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2, double variance) {\n        return within(y1, y2, variance) || (y2 <= y1 && y2 >= y1 - height1) || (y1 <= y2 && y1 >= y2 - height2);\n    }\n\n    public static boolean overlap(double y1, double height1, double y2, double height2) {\n        return overlap(y1, height1, y2, height2, 0.1f);\n    }\n\n    private final static float EPSILON = 0.01f;\n    protected static boolean useQuickSort = useCustomQuickSort();\n\n    public static boolean feq(double f1, double f2) {\n        return (Math.abs(f1 - f2) < EPSILON);\n    }\n\n    public static float round(double d, int decimalPlace) {\n        BigDecimal bd = new BigDecimal(Double.toString(d));\n        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\n        return bd.floatValue();\n    }\n\n    public static Rectangle bounds(Collection<? extends Shape> shapes) {\n        if (shapes.isEmpty()) {\n            throw new IllegalArgumentException(\"shapes can't be empty\");\n        }\n\n        Iterator<? extends Shape> iter = shapes.iterator();\n        Rectangle rv = new Rectangle();\n        rv.setRect(iter.next().getBounds2D());\n\n        while (iter.hasNext()) {\n            Rectangle2D.union(iter.next().getBounds2D(), rv, rv);\n        }\n\n        return rv;\n    }\n\n    // range iterator\n    public static List<Integer> range(final int begin, final int end) {\n        return new AbstractList<Integer>() {\n            @Override\n            public Integer get(int index) {\n                return begin + index;\n            }\n\n            @Override\n            public int size() {\n                return end - begin;\n            }\n        };\n    }\n\n    /* from apache.commons-lang */\n    public static boolean isNumeric(final CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        final int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isDigit(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String join(String glue, String... s) {\n        int k = s.length;\n        if (k == 0) {\n            return null;\n        }\n        StringBuilder out = new StringBuilder();\n        out.append(s[0]);\n        for (int x = 1; x < k; ++x) {\n            out.append(glue).append(s[x]);\n        }\n        return out.toString();\n    }\n\n    public static <T> List<List<T>> transpose(List<List<T>> table) {\n        List<List<T>> ret = new ArrayList<>();\n        final int N = table.get(0).size();\n        for (int i = 0; i < N; i++) {\n            List<T> col = new ArrayList<>();\n            for (List<T> row : table) {\n                col.add(row.get(i));\n            }\n            ret.add(col);\n        }\n        return ret;\n    }\n\n    /**\n     * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're\n     * running on JDK7+\n     */\n    public static <T extends Comparable<? super T>> void sort(List<T> list) {\n        if (useQuickSort) QuickSort.sort(list);\n        else              Collections.sort(list);\n    }\n\n    public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n        if (useQuickSort) QuickSort.sort(list, comparator);\n        else              Collections.sort(list, comparator);\n    }\n\n    private static boolean useCustomQuickSort() {\n        // taken from PDFBOX:\n\n        // check if we need to use the custom quicksort algorithm as a\n        // workaround to the transitivity issue of TextPositionComparator:\n        // https://issues.apache.org/jira/browse/PDFBOX-1512\n\n        String numberybits = System.getProperty(\"java.version\").split(\n                \"-\")[0]; // some Java version strings are 9-internal, which is dumb.\n        String[] versionComponents = numberybits.split(\n                \"\\\\.\");\n        int javaMajorVersion;\n        int javaMinorVersion;\n        if (versionComponents.length >= 2) {\n            javaMajorVersion = Integer.parseInt(versionComponents[0]);\n            javaMinorVersion = Integer.parseInt(versionComponents[1]);\n        } else {\n            javaMajorVersion = 1;\n            javaMinorVersion = Integer.parseInt(versionComponents[0]);\n        }\n        boolean is16orLess = javaMajorVersion == 1 && javaMinorVersion <= 6;\n        String useLegacySort = System.getProperty(\"java.util.Arrays.useLegacyMergeSort\");\n        return !is16orLess || (useLegacySort != null && useLegacySort.equals(\"true\"));\n    }\n\n    public static List<Integer> parsePagesOption(String pagesSpec) throws ParseException {\n        if (pagesSpec.equals(\"all\")) {\n            return null;\n        }\n\n        List<Integer> rv = new ArrayList<>();\n\n        String[] ranges = pagesSpec.split(\",\");\n        for (int i = 0; i < ranges.length; i++) {\n            String[] r = ranges[i].split(\"-\");\n            if (r.length == 0 || !Utils.isNumeric(r[0]) || r.length > 1 && !Utils.isNumeric(r[1])) {\n                throw new ParseException(\"Syntax error in page range specification\");\n            }\n\n            if (r.length < 2) {\n                rv.add(Integer.parseInt(r[0]));\n            } else {\n                int t = Integer.parseInt(r[0]);\n                int f = Integer.parseInt(r[1]);\n                if (t > f) {\n                    throw new ParseException(\"Syntax error in page range specification\");\n                }\n                rv.addAll(Utils.range(t, f + 1));\n            }\n        }\n\n        Collections.sort(rv);\n        return rv;\n    }\n\n    public static void snapPoints(List<? extends Line2D.Float> rulings, float xThreshold, float yThreshold) {\n\n        // collect points and keep a Line -> p1,p2 map\n        Map<Line2D.Float, Point2D[]> linesToPoints = new HashMap<>();\n        List<Point2D> points = new ArrayList<>();\n        for (Line2D.Float r : rulings) {\n            Point2D p1 = r.getP1();\n            Point2D p2 = r.getP2();\n            linesToPoints.put(r, new Point2D[]{p1, p2});\n            points.add(p1);\n            points.add(p2);\n        }\n\n        // snap by X\n        Collections.sort(points, new Comparator<Point2D>() {\n            @Override\n            public int compare(Point2D arg0, Point2D arg1) {\n                return java.lang.Double.compare(arg0.getX(), arg1.getX());\n            }\n        });\n\n        List<List<Point2D>> groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{points.get(0)})));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(p.getX() - last.get(0).getX()) < xThreshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{p})));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            float avgLoc = 0;\n            for (Point2D p : group) {\n                avgLoc += p.getX();\n            }\n            avgLoc /= group.size();\n            for (Point2D p : group) {\n                p.setLocation(avgLoc, p.getY());\n            }\n        }\n        // ---\n\n        // snap by Y\n        Collections.sort(points, new Comparator<Point2D>() {\n            @Override\n            public int compare(Point2D arg0, Point2D arg1) {\n                return java.lang.Double.compare(arg0.getY(), arg1.getY());\n            }\n        });\n\n        groupedPoints = new ArrayList<>();\n        groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{points.get(0)})));\n\n        for (Point2D p : points.subList(1, points.size() - 1)) {\n            List<Point2D> last = groupedPoints.get(groupedPoints.size() - 1);\n            if (Math.abs(p.getY() - last.get(0).getY()) < yThreshold) {\n                groupedPoints.get(groupedPoints.size() - 1).add(p);\n            } else {\n                groupedPoints.add(new ArrayList<>(Arrays.asList(new Point2D[]{p})));\n            }\n        }\n\n        for (List<Point2D> group : groupedPoints) {\n            float avgLoc = 0;\n            for (Point2D p : group) {\n                avgLoc += p.getY();\n            }\n            avgLoc /= group.size();\n            for (Point2D p : group) {\n                p.setLocation(p.getX(), avgLoc);\n            }\n        }\n        // ---\n\n        // finally, modify lines\n        for (Map.Entry<Line2D.Float, Point2D[]> ltp : linesToPoints.entrySet()) {\n            Point2D[] p = ltp.getValue();\n            ltp.getKey().setLine(p[0], p[1]);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDPage page, int dpi, ImageType imageType) throws IOException {\n        try (PDDocument document = new PDDocument()) {\n            document.addPage(page);\n            PDFRenderer renderer = new PDFRenderer(document);\n            document.close();\n            return renderer.renderImageWithDPI(0, dpi, imageType);\n        }\n    }\n\n    public static BufferedImage pageConvertToImage(PDDocument doc, PDPage page, int dpi, ImageType imageType) throws IOException {\n        PDFRenderer renderer = new PDFRenderer(doc);\n        return renderer.renderImageWithDPI(doc.getPages().indexOf(page), dpi, imageType);\n    }\n}\n"
            },
            "observation": "The file has been overwritten with the original implementation of the `snapPoints` method. Now, I will run the tests to ensure that the code works as expected."
        },
        {
            "tool": "overwrite_file",
            "result": "Tests passed. Please commit your changes."
        },
        {
            "thought": "The tests have passed successfully after reverting the changes. I will now commit the changes to the codebase.",
            "action": "commit_changes",
            "tools_input": {
                "files": [
                    "src/main/java/technology/tabula/Utils.java"
                ],
                "commit_message": "Reverted changes to the snapPoints method in Utils.java to restore original functionality and ensure tests pass."
            },
            "observation": "The changes have been committed successfully."
        },
        {
            "tool": "commit_changes",
            "result": "Changes committed."
        },
        {
            "thought": "The changes have been successfully committed. There are no further refactoring opportunities identified at this moment.",
            "action": "stop",
            "tools_input": {
                "changes_summary": "Reverted changes to the snapPoints method in Utils.java to restore original functionality and ensure tests pass."
            },
            "observation": "The refactoring process is complete, and all changes have been committed successfully."
        }
    ],
    "project": "/Users/I539028/Desktop/Seminar/refactoring-lab/samples/java_tabula",
    "llm": "gpt-4o"
}